/* The following code was generated by JFlex 1.6.1 */

package Lexical;

import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Lexical/lexer.flex</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\11\1\12\1\3\22\0\1\5\1\54\3\0"+
    "\1\1\1\55\1\0\1\63\1\64\1\10\1\65\1\73\1\66\1\67"+
    "\1\7\1\14\1\74\1\75\1\74\6\21\1\0\1\1\1\52\1\53"+
    "\1\54\2\0\1\50\3\20\1\70\1\20\7\71\1\47\11\71\1\17"+
    "\2\71\1\57\1\6\1\60\1\0\1\72\1\0\1\40\1\30\1\37"+
    "\1\25\1\32\1\41\1\36\1\42\1\22\1\71\1\46\1\31\1\43"+
    "\1\23\1\26\1\44\1\71\1\35\1\34\1\24\1\27\1\33\1\45"+
    "\1\15\1\51\1\71\1\61\1\56\1\62\7\0\1\11\u1f96\0\1\13"+
    "\1\16\12\0\1\11\1\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\2\1\1\1\5"+
    "\1\1\1\5\15\1\2\2\2\1\1\6\1\7\1\2"+
    "\1\10\5\0\2\10\1\11\1\12\1\0\1\11\22\0"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\2\0\1\21"+
    "\1\22\2\11\1\23\2\0\1\11\14\0\1\24\2\0"+
    "\1\25\1\0\1\21\1\10\3\23\3\0\1\26\1\27"+
    "\1\30\4\0\1\31\3\0\3\24\2\0\3\25\1\0"+
    "\1\32\1\22\2\0\1\33\1\0\3\26\3\30\1\0"+
    "\1\34\3\0\1\11\3\31\2\0\1\35\1\36\1\37"+
    "\1\0\1\22\2\0\1\40\3\34\2\0\1\41\1\0"+
    "\3\35\3\37\3\0\3\40\1\42\1\0\3\41\2\0"+
    "\1\11\3\0\3\42\3\0\1\43\1\0\1\44\3\0"+
    "\1\11\3\43\1\45\2\0\3\45\4\0\1\46\4\0"+
    "\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\76\0\76\0\174\0\272\0\370\0\u0136"+
    "\0\u0174\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326"+
    "\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516"+
    "\0\u0554\0\u0592\0\u05d0\0\u060e\0\76\0\76\0\u064c\0\u064c"+
    "\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c"+
    "\0\u01b2\0\u01b2\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0"+
    "\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\76\0\76\0\76"+
    "\0\76\0\76\0\76\0\u0d14\0\u0d52\0\u07c0\0\u0d90\0\76"+
    "\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80"+
    "\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170"+
    "\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\76\0\u1322"+
    "\0\76\0\u1360\0\u083c\0\u139e\0\u13dc\0\u141a\0\u1458\0\u01b2"+
    "\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648"+
    "\0\u1686\0\76\0\u16c4\0\u083c\0\u1702\0\u1740\0\76\0\u177e"+
    "\0\u083c\0\u17bc\0\76\0\u17fa\0\u1838\0\u1876\0\76\0\u18b4"+
    "\0\76\0\u18f2\0\u083c\0\76\0\u1930\0\u083c\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\76\0\u1ae2\0\u083c\0\u1b20"+
    "\0\u1b5e\0\u1b9c\0\u01b2\0\u1bda\0\u1c18\0\u1838\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\76\0\u1d10\0\u083c\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08"+
    "\0\76\0\u1e46\0\u083c\0\76\0\u1e84\0\u083c\0\u1ec2\0\u1f00"+
    "\0\u1f3e\0\76\0\u1f7c\0\u083c\0\u1fba\0\u1ff8\0\76\0\u2036"+
    "\0\u083c\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\76"+
    "\0\u21e8\0\u083c\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\76"+
    "\0\u235c\0\u239a\0\u23d8\0\u2416\0\76\0\u2454\0\u083c\0\u2492"+
    "\0\u24d0\0\u250e\0\76\0\u254c\0\u083c\0\u258a\0\u25c8\0\u2606"+
    "\0\u2644\0\76\0\u2682\0\u26c0\0\u26fe\0\u273c\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\4\1\6\1\7\1\2"+
    "\1\0\1\4\1\10\1\11\1\12\1\2\2\12\1\13"+
    "\1\14\1\15\1\16\1\17\2\12\1\20\1\12\1\21"+
    "\1\22\1\23\1\24\1\12\1\25\1\12\1\26\3\12"+
    "\1\27\1\12\1\30\2\12\1\31\1\3\1\32\1\33"+
    "\1\34\6\3\1\35\1\36\1\37\2\12\1\40\1\3"+
    "\2\13\102\0\1\4\150\0\1\41\1\0\1\42\1\0"+
    "\1\43\22\0\1\44\101\0\1\45\75\0\1\13\1\40"+
    "\1\0\1\46\1\40\1\13\30\40\15\0\1\47\3\40"+
    "\1\0\2\13\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\33\52\16\0\3\52\1\50\1\53\1\51\14\0\1\13"+
    "\1\40\1\0\2\40\1\13\30\40\15\0\1\47\3\40"+
    "\1\0\2\13\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\4\52\1\54\15\52\1\55\1\52\1\56\6\52\16\0"+
    "\3\52\1\50\1\53\1\51\5\0\1\50\6\0\1\51"+
    "\1\52\1\0\10\52\1\57\22\52\16\0\3\52\1\50"+
    "\1\53\1\51\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\16\52\1\60\4\52\1\61\7\52\16\0\3\52\1\50"+
    "\1\53\1\51\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\7\52\1\62\23\52\16\0\3\52\1\50\1\53\1\51"+
    "\5\0\1\50\6\0\1\51\1\52\1\0\16\52\1\63"+
    "\14\52\16\0\3\52\1\50\1\53\1\51\5\0\1\50"+
    "\6\0\1\51\1\64\1\0\12\52\1\65\20\52\16\0"+
    "\3\52\1\50\1\53\1\51\5\0\1\50\6\0\1\51"+
    "\1\52\1\0\7\52\1\66\23\52\16\0\3\52\1\50"+
    "\1\53\1\51\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\5\52\1\67\25\52\16\0\3\52\1\50\1\53\1\51"+
    "\5\0\1\50\6\0\1\51\1\52\1\0\13\52\1\70"+
    "\17\52\16\0\3\52\1\50\1\53\1\51\5\0\1\50"+
    "\6\0\1\51\1\52\1\0\12\52\1\71\20\52\16\0"+
    "\3\52\1\50\1\53\1\51\5\0\1\50\6\0\1\51"+
    "\1\52\1\0\7\52\1\72\11\52\1\73\11\52\16\0"+
    "\3\52\1\50\1\53\1\51\5\0\1\50\6\0\1\51"+
    "\1\52\1\0\23\52\1\74\7\52\16\0\3\52\1\50"+
    "\1\53\1\51\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\13\52\1\75\17\52\16\0\3\52\1\50\1\53\1\51"+
    "\53\0\1\76\75\0\1\77\77\0\1\77\76\0\1\100"+
    "\33\0\2\40\1\0\33\40\15\0\4\40\1\0\2\40"+
    "\60\0\1\101\77\0\1\102\77\0\1\103\11\0\3\104"+
    "\2\0\4\104\2\0\63\104\15\0\1\105\74\0\1\106"+
    "\1\40\1\0\1\40\2\106\3\40\1\106\2\40\1\106"+
    "\1\40\1\106\4\40\3\106\6\40\1\106\1\40\15\0"+
    "\1\40\1\106\2\40\1\0\2\106\14\0\1\107\1\40"+
    "\1\0\2\40\1\107\30\40\15\0\4\40\1\0\2\107"+
    "\2\0\1\110\1\111\2\110\4\0\1\110\65\0\1\110"+
    "\1\111\1\110\1\50\4\0\1\110\1\0\1\51\1\52"+
    "\1\0\33\52\16\0\3\52\1\50\1\53\1\51\5\0"+
    "\1\50\6\0\1\51\1\52\1\0\5\52\1\112\25\52"+
    "\16\0\3\52\1\50\1\53\1\51\2\0\1\113\1\114"+
    "\1\113\1\115\4\0\1\113\1\0\1\51\1\52\1\0"+
    "\33\52\16\0\3\52\1\50\1\53\1\51\5\0\1\50"+
    "\6\0\1\51\1\52\1\0\25\52\1\116\5\52\16\0"+
    "\3\52\1\50\1\53\1\51\5\0\1\50\6\0\1\51"+
    "\1\52\1\0\12\52\1\117\20\52\16\0\3\52\1\50"+
    "\1\53\1\51\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\10\52\1\120\22\52\16\0\3\52\1\50\1\53\1\51"+
    "\5\0\1\50\6\0\1\51\1\52\1\0\3\52\1\121"+
    "\27\52\16\0\3\52\1\50\1\53\1\51\5\0\1\50"+
    "\6\0\1\51\1\52\1\0\10\52\1\122\22\52\16\0"+
    "\3\52\1\50\1\53\1\51\5\0\1\50\6\0\1\51"+
    "\1\52\1\0\13\52\1\123\17\52\16\0\3\52\1\50"+
    "\1\53\1\51\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\5\52\1\124\25\52\16\0\3\52\1\50\1\53\1\51"+
    "\5\0\1\50\6\0\1\51\1\52\1\0\15\52\1\125"+
    "\15\52\16\0\3\52\1\50\1\53\1\51\5\0\1\50"+
    "\6\0\1\51\1\52\1\0\3\52\1\126\27\52\16\0"+
    "\3\52\1\50\1\53\1\51\5\0\1\50\6\0\1\51"+
    "\1\52\1\0\16\52\1\127\14\52\16\0\3\52\1\50"+
    "\1\53\1\51\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\5\52\1\130\25\52\16\0\3\52\1\50\1\53\1\51"+
    "\5\0\1\50\6\0\1\51\1\52\1\0\21\52\1\131"+
    "\11\52\16\0\3\52\1\50\1\53\1\51\5\0\1\50"+
    "\6\0\1\51\1\52\1\0\16\52\1\132\14\52\16\0"+
    "\3\52\1\50\1\53\1\51\5\0\1\50\6\0\1\51"+
    "\1\52\1\0\12\52\1\133\20\52\16\0\3\52\1\50"+
    "\1\53\1\51\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\3\52\1\134\27\52\16\0\3\52\1\50\1\53\1\51"+
    "\5\0\1\50\6\0\1\51\1\52\1\0\26\52\1\135"+
    "\4\52\16\0\3\52\1\50\1\53\1\51\10\0\1\136"+
    "\103\0\1\137\73\0\1\107\1\40\1\0\2\40\1\107"+
    "\10\40\1\140\17\40\15\0\1\40\1\140\2\40\1\0"+
    "\2\107\4\0\1\110\73\0\1\141\1\142\1\141\1\143"+
    "\4\0\1\141\1\0\1\51\1\52\1\0\13\52\1\144"+
    "\17\52\16\0\3\52\1\50\1\53\1\51\22\0\1\145"+
    "\57\0\1\113\15\0\1\145\55\0\1\110\1\111\2\110"+
    "\4\0\1\110\7\0\1\145\60\0\1\50\6\0\1\51"+
    "\1\52\1\0\12\52\1\146\20\52\16\0\3\52\1\50"+
    "\1\53\1\51\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\12\52\1\147\20\52\16\0\3\52\1\50\1\53\1\51"+
    "\5\0\1\50\6\0\1\51\1\52\1\0\13\52\1\150"+
    "\17\52\16\0\3\52\1\50\1\53\1\51\5\0\1\50"+
    "\6\0\1\51\1\52\1\0\15\52\1\151\15\52\16\0"+
    "\3\52\1\50\1\53\1\51\5\0\1\50\6\0\1\51"+
    "\1\52\1\0\11\52\1\152\21\52\16\0\3\52\1\50"+
    "\1\53\1\51\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\21\52\1\153\11\52\16\0\3\52\1\50\1\53\1\51"+
    "\5\0\1\50\6\0\1\51\1\52\1\0\13\52\1\154"+
    "\17\52\16\0\3\52\1\50\1\53\1\51\5\0\1\50"+
    "\6\0\1\51\1\52\1\0\13\52\1\155\17\52\16\0"+
    "\3\52\1\50\1\53\1\51\5\0\1\50\6\0\1\51"+
    "\1\52\1\0\6\52\1\156\24\52\16\0\3\52\1\50"+
    "\1\53\1\51\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\3\52\1\157\27\52\16\0\3\52\1\50\1\53\1\51"+
    "\5\0\1\50\6\0\1\51\1\52\1\0\10\52\1\160"+
    "\22\52\16\0\3\52\1\50\1\53\1\51\5\0\1\50"+
    "\6\0\1\51\1\52\1\0\15\52\1\161\15\52\16\0"+
    "\3\52\1\50\1\53\1\51\2\0\1\162\1\163\1\162"+
    "\1\164\4\0\1\162\1\0\1\51\1\52\1\0\33\52"+
    "\16\0\3\52\1\50\1\53\1\51\5\0\1\50\6\0"+
    "\1\51\1\52\1\0\15\52\1\165\15\52\16\0\3\52"+
    "\1\50\1\53\1\51\5\0\1\50\6\0\1\51\1\52"+
    "\1\0\12\52\1\166\20\52\16\0\3\52\1\50\1\53"+
    "\1\51\2\0\1\167\1\170\1\167\1\171\4\0\1\167"+
    "\1\0\1\51\1\52\1\0\31\52\1\172\1\52\16\0"+
    "\3\52\1\50\1\53\1\51\7\0\1\173\102\0\1\174"+
    "\1\40\1\0\2\40\1\174\30\40\13\0\2\175\4\40"+
    "\1\0\2\174\4\0\1\141\76\0\1\50\6\0\1\51"+
    "\1\52\1\0\16\52\1\176\14\52\16\0\3\52\1\50"+
    "\1\53\1\51\41\0\1\177\41\0\1\50\6\0\1\51"+
    "\1\52\1\0\13\52\1\200\17\52\16\0\3\52\1\50"+
    "\1\53\1\51\2\0\1\201\1\202\1\201\1\203\4\0"+
    "\1\201\1\0\1\51\1\52\1\0\33\52\16\0\3\52"+
    "\1\50\1\53\1\51\2\0\1\204\1\205\1\204\1\206"+
    "\4\0\1\204\1\0\1\51\1\52\1\0\33\52\16\0"+
    "\3\52\1\50\1\53\1\51\5\0\1\50\6\0\1\51"+
    "\1\52\1\0\12\52\1\207\20\52\16\0\3\52\1\50"+
    "\1\53\1\51\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\27\52\1\210\3\52\16\0\3\52\1\50\1\53\1\51"+
    "\5\0\1\50\6\0\1\51\1\52\1\0\4\52\1\211"+
    "\26\52\16\0\3\52\1\50\1\53\1\51\2\0\1\212"+
    "\1\213\1\212\1\214\4\0\1\212\1\0\1\51\1\52"+
    "\1\0\33\52\16\0\3\52\1\50\1\53\1\51\2\0"+
    "\1\215\1\216\1\215\1\217\4\0\1\215\1\0\1\51"+
    "\1\52\1\0\33\52\16\0\3\52\1\50\1\53\1\51"+
    "\5\0\1\50\6\0\1\51\1\52\1\0\4\52\1\220"+
    "\26\52\16\0\3\52\1\50\1\53\1\51\5\0\1\50"+
    "\6\0\1\51\1\52\1\0\16\52\1\221\14\52\16\0"+
    "\3\52\1\50\1\53\1\51\5\0\1\50\6\0\1\51"+
    "\1\52\1\0\15\52\1\222\15\52\16\0\3\52\1\50"+
    "\1\53\1\51\4\0\1\162\76\0\1\50\6\0\1\51"+
    "\1\52\1\0\13\52\1\223\17\52\16\0\3\52\1\50"+
    "\1\53\1\51\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\13\52\1\224\17\52\16\0\3\52\1\50\1\53\1\51"+
    "\4\0\1\167\76\0\1\50\6\0\1\51\1\52\1\0"+
    "\16\52\1\225\14\52\16\0\3\52\1\50\1\53\1\51"+
    "\14\0\1\174\1\40\1\0\2\40\1\174\30\40\15\0"+
    "\4\40\1\0\2\174\14\0\1\226\4\0\1\226\52\0"+
    "\2\226\5\0\1\50\6\0\1\51\1\52\1\0\22\52"+
    "\1\227\10\52\16\0\3\52\1\50\1\53\1\51\5\0"+
    "\1\50\6\0\1\51\1\52\1\0\24\52\1\230\6\52"+
    "\16\0\3\52\1\50\1\53\1\51\4\0\1\201\75\0"+
    "\1\204\76\0\1\50\6\0\1\51\1\52\1\0\13\52"+
    "\1\231\17\52\16\0\3\52\1\50\1\53\1\51\2\0"+
    "\1\232\1\233\1\232\1\234\4\0\1\232\1\0\1\51"+
    "\1\52\1\0\33\52\16\0\3\52\1\50\1\53\1\51"+
    "\5\0\1\50\6\0\1\51\1\52\1\0\6\52\1\235"+
    "\24\52\16\0\3\52\1\50\1\53\1\51\32\0\1\236"+
    "\47\0\1\212\25\0\1\236\45\0\1\110\1\111\2\110"+
    "\4\0\1\110\17\0\1\236\47\0\1\215\76\0\1\50"+
    "\6\0\1\51\1\52\1\0\17\52\1\237\13\52\16\0"+
    "\3\52\1\50\1\53\1\51\5\0\1\50\6\0\1\51"+
    "\1\52\1\0\4\52\1\240\26\52\16\0\3\52\1\50"+
    "\1\53\1\51\2\0\1\241\1\242\1\241\1\243\4\0"+
    "\1\241\1\0\1\51\1\52\1\0\33\52\16\0\3\52"+
    "\1\50\1\53\1\51\2\0\1\244\1\245\1\244\1\246"+
    "\4\0\1\244\1\0\1\51\1\52\1\0\33\52\16\0"+
    "\3\52\1\50\1\53\1\51\5\0\1\50\6\0\1\51"+
    "\1\52\1\0\16\52\1\247\14\52\16\0\3\52\1\50"+
    "\1\53\1\51\5\0\1\50\6\0\1\51\1\52\1\0"+
    "\21\52\1\250\11\52\16\0\3\52\1\50\1\53\1\51"+
    "\5\0\1\50\6\0\1\51\1\52\1\0\13\52\1\251"+
    "\17\52\16\0\3\52\1\50\1\53\1\51\2\0\1\252"+
    "\1\253\1\252\1\254\4\0\1\252\1\0\1\51\1\52"+
    "\1\0\33\52\16\0\3\52\1\50\1\53\1\51\4\0"+
    "\1\232\76\0\1\50\6\0\1\51\1\52\1\0\15\52"+
    "\1\255\15\52\16\0\3\52\1\50\1\53\1\51\31\0"+
    "\1\256\46\0\1\257\1\260\1\257\1\261\4\0\1\257"+
    "\1\0\1\51\1\52\1\0\33\52\16\0\3\52\1\50"+
    "\1\53\1\51\2\0\1\262\1\263\1\262\1\264\4\0"+
    "\1\262\1\0\1\51\1\52\1\0\33\52\16\0\3\52"+
    "\1\50\1\53\1\51\4\0\1\241\75\0\1\244\76\0"+
    "\1\50\6\0\1\51\1\52\1\0\21\52\1\265\11\52"+
    "\16\0\3\52\1\50\1\53\1\51\5\0\1\50\6\0"+
    "\1\51\1\52\1\0\20\52\1\266\12\52\16\0\3\52"+
    "\1\50\1\53\1\51\5\0\1\50\6\0\1\51\1\52"+
    "\1\0\4\52\1\267\26\52\16\0\3\52\1\50\1\53"+
    "\1\51\4\0\1\252\73\0\1\270\1\271\1\270\1\272"+
    "\4\0\1\270\1\0\1\51\1\52\1\0\33\52\16\0"+
    "\3\52\1\50\1\53\1\51\34\0\1\273\45\0\1\257"+
    "\126\0\1\274\44\0\1\262\30\0\1\274\42\0\1\110"+
    "\1\111\2\110\4\0\1\110\22\0\1\274\45\0\1\50"+
    "\6\0\1\51\1\52\1\0\32\52\1\275\16\0\3\52"+
    "\1\50\1\53\1\51\5\0\1\50\6\0\1\51\1\52"+
    "\1\0\13\52\1\276\17\52\16\0\3\52\1\50\1\53"+
    "\1\51\5\0\1\50\6\0\1\51\1\52\1\0\5\52"+
    "\1\277\25\52\16\0\3\52\1\50\1\53\1\51\4\0"+
    "\1\270\123\0\1\300\75\0\1\301\45\0\1\302\1\303"+
    "\1\302\1\304\4\0\1\302\1\0\1\51\1\52\1\0"+
    "\33\52\16\0\3\52\1\50\1\53\1\51\2\0\1\305"+
    "\1\306\1\305\1\307\4\0\1\305\1\0\1\51\1\52"+
    "\1\0\33\52\16\0\3\52\1\50\1\53\1\51\5\0"+
    "\1\50\6\0\1\51\1\52\1\0\15\52\1\310\15\52"+
    "\16\0\3\52\1\50\1\53\1\51\24\0\1\311\120\0"+
    "\1\312\32\0\1\302\42\0\1\312\30\0\1\110\1\111"+
    "\2\110\4\0\1\110\34\0\1\312\32\0\1\305\73\0"+
    "\1\313\1\314\1\313\1\315\4\0\1\313\1\0\1\51"+
    "\1\52\1\0\33\52\16\0\3\52\1\50\1\53\1\51"+
    "\27\0\1\316\100\0\1\317\47\0\1\313\126\0\1\320"+
    "\105\0\1\321\53\0\1\322\122\0\1\323\62\0\1\324"+
    "\75\0\1\325\100\0\1\326\106\0\1\327\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10106];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\30\1\2\11\2\1\5\0\4\1\1\0"+
    "\1\1\22\0\6\11\2\0\2\1\1\11\2\1\2\0"+
    "\1\1\14\0\1\1\2\0\1\1\1\0\1\11\1\1"+
    "\1\11\2\1\3\0\3\1\4\0\1\1\3\0\1\11"+
    "\2\1\2\0\1\11\2\1\1\0\1\11\1\1\2\0"+
    "\1\11\1\0\1\11\2\1\1\11\2\1\1\0\1\1"+
    "\3\0\1\1\1\11\2\1\2\0\3\1\1\0\1\1"+
    "\2\0\1\1\1\11\2\1\2\0\1\1\1\0\1\11"+
    "\2\1\1\11\2\1\3\0\1\11\3\1\1\0\1\11"+
    "\2\1\2\0\1\1\3\0\1\11\2\1\3\0\1\1"+
    "\1\0\1\11\3\0\1\1\1\11\3\1\2\0\1\11"+
    "\2\1\4\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  private int fixed;
  private String token;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return "Token no reconocido: " + yytext() + " en linea: " + yyline+ " columna " + yycolumn;
            }
          case 40: break;
          case 2: 
            { token = yytext();
    return yytext() + " line " + yyline + " cols " + yycolumn + " is " + "'" + token + "'";
            }
          case 41: break;
          case 3: 
            { // accion vacia: se ignoran los espacios y tabuladores
            }
          case 42: break;
          case 4: 
            { // Empty action, ignore single line comments
            }
          case 43: break;
          case 5: 
            { token = yytext();
    fixed = token.length() - 1;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed +  " is intConstant  " + "(value = " + token + ")";
            }
          case 44: break;
          case 6: 
            { return yytext() + " line " + yyline + " cols " + yycolumn + " is " + "'+'";
            }
          case 45: break;
          case 7: 
            { return yytext() + " line " + yyline + " cols " + yycolumn + " is " + "'-'";
            }
          case 46: break;
          case 8: 
            { return "*** Error linea " + yyline + " identificador inválido ";
            }
          case 47: break;
          case 9: 
            { token = yytext();
    fixed = yycolumn + token.length() - 1;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + "is identifier";
            }
          case 48: break;
          case 10: 
            { return "*** Error linea " + yyline + " identificador muy largo ";
            }
          case 49: break;
          case 11: 
            { token = yytext();
    fixed = yycolumn + 1;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed +  " is " + "'" + token + "'";
            }
          case 50: break;
          case 12: 
            { token = yytext();
    fixed = yycolumn + 1;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'" + token + "'";
            }
          case 51: break;
          case 13: 
            { fixed = yycolumn + 1;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'||'";
            }
          case 52: break;
          case 14: 
            { fixed = yycolumn + 1;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'[]'";
            }
          case 53: break;
          case 15: 
            { fixed = yycolumn + 1;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'{}'";
            }
          case 54: break;
          case 16: 
            { fixed = yycolumn + 1;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'()'";
            }
          case 55: break;
          case 17: 
            { token = yytext();
    fixed = token.length() - 1;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is hexadecimal";
            }
          case 56: break;
          case 18: 
            { token = yytext();
    fixed = yycolumn + token.length() - 1;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + "is float (value = " + token + ")";
            }
          case 57: break;
          case 19: 
            { fixed = yycolumn + 2;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is int";
            }
          case 58: break;
          case 20: 
            { fixed = yycolumn + 2;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is for";
            }
          case 59: break;
          case 21: 
            { fixed = yycolumn + 2;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is New";
            }
          case 60: break;
          case 22: 
            { fixed = yycolumn + 3;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is null";
            }
          case 61: break;
          case 23: 
            { fixed = yycolumn + 3;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is boolConstant (value = true)";
            }
          case 62: break;
          case 24: 
            { fixed = yycolumn + 3;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is this";
            }
          case 63: break;
          case 25: 
            { fixed = yycolumn + 3;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is void";
            }
          case 64: break;
          case 26: 
            { // for testing
    return "Comentario multilinea brother";
            }
          case 65: break;
          case 27: 
            { fixed = yycolumn + 1;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is if";
            }
          case 66: break;
          case 28: 
            { fixed = yycolumn + 4;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is break";
            }
          case 67: break;
          case 29: 
            { fixed = yycolumn + 4;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is class";
            }
          case 68: break;
          case 30: 
            { fixed = yycolumn + 4;
     return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is boolConstant (value = false)";
            }
          case 69: break;
          case 31: 
            { fixed = yycolumn + 4;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is while";
            }
          case 70: break;
          case 32: 
            { fixed = yycolumn + 5;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is double";
            }
          case 71: break;
          case 33: 
            { fixed = yycolumn + 5;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is string";
            }
          case 72: break;
          case 34: 
            { fixed = yycolumn + 6;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is extends";
            }
          case 73: break;
          case 35: 
            { fixed = yycolumn + 8;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is interface";
            }
          case 74: break;
          case 36: 
            { fixed = yycolumn + 3;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is else";
            }
          case 75: break;
          case 37: 
            { fixed = yycolumn + 9;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is implements";
            }
          case 76: break;
          case 38: 
            { fixed = yycolumn + 5;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is return";
            }
          case 77: break;
          case 39: 
            { fixed = yycolumn + 7;
    return yytext() + " line " + yyline + " cols " + yycolumn + "-" + fixed + " is NewArray";
            }
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
