/* The following code was generated by JFlex 1.6.1 */

package Lexical;

import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Lexical/lexer.flex</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\7\1\10\1\3\22\0\1\2\1\54\1\5"+
    "\2\0\1\1\1\55\1\0\1\50\1\51\1\11\1\57\1\70\1\60"+
    "\1\64\1\6\1\61\11\12\1\0\1\1\1\52\1\53\1\54\2\0"+
    "\1\42\3\63\1\65\1\63\7\66\1\41\11\66\1\62\2\66\1\44"+
    "\1\0\1\45\1\0\1\67\1\0\1\31\1\21\1\30\1\16\1\23"+
    "\1\32\1\27\1\33\1\13\1\66\1\40\1\22\1\35\1\14\1\17"+
    "\1\36\1\66\1\26\1\25\1\15\1\20\1\24\1\37\1\34\1\43"+
    "\1\66\1\46\1\56\1\47\7\0\1\7\u1fa2\0\1\7\1\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\1\1\4\1\5\1\6"+
    "\16\7\5\2\2\1\1\10\1\11\1\6\1\12\1\13"+
    "\4\0\1\14\2\0\3\7\1\15\20\7\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\25\4\0\1\26"+
    "\1\27\2\15\14\7\1\30\2\7\1\31\4\0\1\32"+
    "\1\0\2\27\2\7\1\33\1\34\1\35\4\7\1\36"+
    "\3\7\2\30\2\7\2\31\1\7\1\0\1\32\1\26"+
    "\1\0\2\7\2\33\2\35\1\7\1\37\3\7\2\36"+
    "\2\7\1\40\1\41\1\42\1\7\1\32\2\7\1\43"+
    "\2\37\1\0\1\7\1\44\1\7\2\40\2\42\3\7"+
    "\2\43\1\0\1\45\2\44\5\7\1\0\2\45\1\0"+
    "\1\7\1\46\1\7\1\47\1\0\2\7\2\46\1\50"+
    "\2\0\2\50\4\0\1\51\4\0\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\71\0\162\0\253\0\344\0\u011d\0\71"+
    "\0\u0156\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\71\0\71"+
    "\0\u063c\0\u0675\0\u06ae\0\162\0\u06e7\0\u0720\0\344\0\u0759"+
    "\0\u0792\0\u07cb\0\71\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8"+
    "\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\u0c3f\0\344\0\71\0\u0c78"+
    "\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\71\0\u0dce\0\u0e07"+
    "\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf"+
    "\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197"+
    "\0\u11d0\0\u1209\0\u1242\0\u0c78\0\u127b\0\71\0\u12b4\0\u12ed"+
    "\0\u1326\0\u135f\0\u0273\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\u14ee\0\u1527\0\u1560\0\71\0\u1599\0\u15d2\0\u160b"+
    "\0\71\0\u1644\0\u167d\0\u16b6\0\u0cea\0\u16ef\0\u16ef\0\u1728"+
    "\0\u1761\0\71\0\u179a\0\71\0\u17d3\0\u180c\0\u1845\0\u187e"+
    "\0\u18b7\0\u18f0\0\71\0\u1929\0\u1962\0\u199b\0\u19d4\0\u0273"+
    "\0\u1a0d\0\u1a46\0\71\0\u1a7f\0\u1ab8\0\u1af1\0\71\0\u1b2a"+
    "\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\71\0\u1c47\0\71\0\u1c80"+
    "\0\u1cb9\0\u1cf2\0\u1d2b\0\71\0\u1d64\0\u1d9d\0\u1dd6\0\71"+
    "\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\71"+
    "\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\71\0\u20bb\0\u20f4"+
    "\0\u212d\0\71\0\u2166\0\u219f\0\u21d8\0\u2211\0\71\0\u224a"+
    "\0\u2283\0\u22bc\0\u22f5\0\u232e\0\71\0\u2367\0\u23a0\0\u23d9"+
    "\0\u2412\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\0"+
    "\1\4\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\16\1\20\1\21\1\22\1\23\1\16\1\24"+
    "\1\16\1\25\4\16\1\26\1\16\1\27\2\16\1\30"+
    "\1\3\1\31\1\3\1\32\1\3\1\33\1\3\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\2\16\1\3\2\16"+
    "\1\42\1\43\73\0\3\44\3\0\1\44\57\0\1\43"+
    "\2\0\2\44\1\4\3\0\1\44\57\0\1\43\3\45"+
    "\2\46\1\47\1\45\2\46\60\45\6\0\1\50\2\0"+
    "\1\51\71\0\1\11\31\42\15\0\1\11\2\42\1\52"+
    "\3\42\3\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\2\16\1\55\15\16\1\56\2\16\1\57\6\16\15\0"+
    "\3\16\1\0\3\16\3\0\1\53\1\54\1\53\3\0"+
    "\1\53\1\0\6\16\1\60\23\16\15\0\3\16\1\0"+
    "\3\16\3\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\14\16\1\61\4\16\1\62\10\16\15\0\3\16\1\0"+
    "\3\16\3\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\5\16\1\63\24\16\15\0\3\16\1\0\3\16\3\0"+
    "\1\53\1\54\1\53\3\0\1\53\1\0\32\16\15\0"+
    "\3\16\1\0\3\16\3\0\1\53\1\54\1\53\3\0"+
    "\1\53\1\0\14\16\1\64\15\16\15\0\3\16\1\0"+
    "\3\16\3\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\10\16\1\65\11\16\1\66\7\16\15\0\3\16\1\0"+
    "\3\16\3\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\5\16\1\67\24\16\15\0\3\16\1\0\3\16\3\0"+
    "\1\53\1\54\1\53\3\0\1\53\1\0\3\16\1\70"+
    "\26\16\15\0\3\16\1\0\3\16\3\0\1\53\1\54"+
    "\1\53\3\0\1\53\1\0\11\16\1\71\20\16\15\0"+
    "\3\16\1\0\3\16\3\0\1\53\1\54\1\53\3\0"+
    "\1\53\1\0\10\16\1\72\21\16\15\0\3\16\1\0"+
    "\3\16\3\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\5\16\1\73\11\16\1\74\12\16\15\0\3\16\1\0"+
    "\3\16\3\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\21\16\1\75\10\16\15\0\3\16\1\0\3\16\3\0"+
    "\1\53\1\54\1\53\3\0\1\53\1\0\11\16\1\76"+
    "\20\16\15\0\3\16\1\0\3\16\46\0\1\77\72\0"+
    "\1\100\72\0\1\101\72\0\1\102\70\0\1\103\72\0"+
    "\1\103\71\0\1\104\24\0\1\11\21\42\1\105\7\42"+
    "\15\0\1\11\1\105\1\42\1\52\3\42\13\0\32\42"+
    "\15\0\3\42\1\0\3\42\3\0\3\43\3\0\1\43"+
    "\60\0\3\45\2\46\1\106\1\45\2\46\60\45\5\0"+
    "\1\107\63\0\3\50\2\0\2\50\2\0\60\50\2\110"+
    "\2\111\1\112\2\110\1\0\1\111\1\113\57\110\12\0"+
    "\1\114\46\0\1\114\13\0\1\53\66\0\1\53\1\54"+
    "\1\53\3\0\1\53\1\0\3\16\1\115\26\16\15\0"+
    "\3\16\1\0\3\16\3\0\1\116\1\117\1\116\3\0"+
    "\1\116\1\0\32\16\15\0\3\16\1\0\3\16\3\0"+
    "\1\53\1\54\1\53\3\0\1\53\1\0\24\16\1\120"+
    "\5\16\15\0\3\16\1\0\3\16\3\0\1\53\1\54"+
    "\1\53\3\0\1\53\1\0\10\16\1\121\21\16\15\0"+
    "\3\16\1\0\3\16\3\0\1\53\1\54\1\53\3\0"+
    "\1\53\1\0\6\16\1\122\23\16\15\0\3\16\1\0"+
    "\3\16\3\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\1\16\1\123\30\16\15\0\3\16\1\0\3\16\3\0"+
    "\1\53\1\54\1\53\3\0\1\53\1\0\6\16\1\124"+
    "\23\16\15\0\3\16\1\0\3\16\3\0\1\53\1\54"+
    "\1\53\3\0\1\53\1\0\11\16\1\125\20\16\15\0"+
    "\3\16\1\0\3\16\3\0\1\53\1\54\1\53\3\0"+
    "\1\53\1\0\13\16\1\126\16\16\15\0\3\16\1\0"+
    "\3\16\3\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\3\16\1\127\26\16\15\0\3\16\1\0\3\16\3\0"+
    "\1\53\1\54\1\53\3\0\1\53\1\0\1\16\1\130"+
    "\30\16\15\0\3\16\1\0\3\16\3\0\1\53\1\54"+
    "\1\53\3\0\1\53\1\0\14\16\1\131\15\16\15\0"+
    "\3\16\1\0\3\16\3\0\1\53\1\54\1\53\3\0"+
    "\1\53\1\0\3\16\1\132\26\16\15\0\3\16\1\0"+
    "\3\16\3\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\17\16\1\133\12\16\15\0\3\16\1\0\3\16\3\0"+
    "\1\53\1\54\1\53\3\0\1\53\1\0\14\16\1\134"+
    "\15\16\15\0\3\16\1\0\3\16\3\0\1\53\1\54"+
    "\1\53\3\0\1\53\1\0\10\16\1\135\21\16\15\0"+
    "\3\16\1\0\3\16\3\0\1\53\1\54\1\53\3\0"+
    "\1\53\1\0\1\16\1\136\30\16\15\0\3\16\1\0"+
    "\3\16\3\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\25\16\1\137\4\16\15\0\3\16\1\0\3\16\13\0"+
    "\1\105\3\42\1\105\2\42\1\105\1\42\1\105\4\42"+
    "\3\105\7\42\1\105\1\42\15\0\1\105\1\42\1\105"+
    "\1\0\1\105\2\42\1\0\3\110\1\0\1\112\2\110"+
    "\2\0\62\110\1\140\1\141\1\112\2\110\1\0\1\142"+
    "\1\113\57\110\3\112\1\141\3\112\1\0\1\142\1\143"+
    "\57\112\3\110\1\0\1\112\1\110\1\144\2\0\60\110"+
    "\12\0\1\114\10\0\1\145\35\0\1\114\3\0\1\145"+
    "\5\0\1\146\1\147\1\146\3\0\1\146\1\0\11\16"+
    "\1\150\20\16\15\0\3\16\1\0\3\16\5\0\1\116"+
    "\66\0\1\53\1\54\1\53\3\0\1\53\1\0\10\16"+
    "\1\151\21\16\15\0\3\16\1\0\3\16\3\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\10\16\1\152\21\16"+
    "\15\0\3\16\1\0\3\16\3\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\11\16\1\153\20\16\15\0\3\16"+
    "\1\0\3\16\3\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\13\16\1\154\16\16\15\0\3\16\1\0\3\16"+
    "\3\0\1\53\1\54\1\53\3\0\1\53\1\0\7\16"+
    "\1\155\22\16\15\0\3\16\1\0\3\16\3\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\17\16\1\156\12\16"+
    "\15\0\3\16\1\0\3\16\3\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\11\16\1\157\20\16\15\0\3\16"+
    "\1\0\3\16\3\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\11\16\1\160\20\16\15\0\3\16\1\0\3\16"+
    "\3\0\1\53\1\54\1\53\3\0\1\53\1\0\4\16"+
    "\1\161\25\16\15\0\3\16\1\0\3\16\3\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\1\16\1\162\30\16"+
    "\15\0\3\16\1\0\3\16\3\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\6\16\1\163\23\16\15\0\3\16"+
    "\1\0\3\16\3\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\13\16\1\164\16\16\15\0\3\16\1\0\3\16"+
    "\3\0\1\165\1\166\1\165\3\0\1\165\1\0\32\16"+
    "\15\0\3\16\1\0\3\16\3\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\13\16\1\167\16\16\15\0\3\16"+
    "\1\0\3\16\3\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\10\16\1\170\21\16\15\0\3\16\1\0\3\16"+
    "\3\0\1\171\1\172\1\171\3\0\1\171\1\0\30\16"+
    "\1\173\1\16\15\0\3\16\1\0\3\16\1\0\3\110"+
    "\1\0\1\112\2\110\2\0\1\113\57\110\4\0\1\142"+
    "\4\0\1\174\70\0\1\174\57\0\3\112\1\141\2\112"+
    "\1\175\1\0\1\142\1\143\57\112\12\0\1\176\44\0"+
    "\2\177\1\176\13\0\1\146\66\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\14\16\1\200\15\16\15\0\3\16"+
    "\1\0\3\16\3\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\11\16\1\201\20\16\15\0\3\16\1\0\3\16"+
    "\3\0\1\202\1\203\1\202\3\0\1\202\1\0\32\16"+
    "\15\0\3\16\1\0\3\16\3\0\1\204\1\205\1\204"+
    "\3\0\1\204\1\0\32\16\15\0\3\16\1\0\3\16"+
    "\3\0\1\53\1\54\1\53\3\0\1\53\1\0\10\16"+
    "\1\206\21\16\15\0\3\16\1\0\3\16\3\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\26\16\1\207\3\16"+
    "\15\0\3\16\1\0\3\16\3\0\1\210\1\211\1\210"+
    "\3\0\1\210\1\0\32\16\15\0\3\16\1\0\3\16"+
    "\3\0\1\53\1\54\1\53\3\0\1\53\1\0\2\16"+
    "\1\212\27\16\15\0\3\16\1\0\3\16\3\0\1\213"+
    "\1\214\1\213\3\0\1\213\1\0\32\16\15\0\3\16"+
    "\1\0\3\16\3\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\2\16\1\215\27\16\15\0\3\16\1\0\3\16"+
    "\3\0\1\53\1\54\1\53\3\0\1\53\1\0\14\16"+
    "\1\216\15\16\15\0\3\16\1\0\3\16\3\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\13\16\1\217\16\16"+
    "\15\0\3\16\1\0\3\16\5\0\1\165\66\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\11\16\1\220\20\16"+
    "\15\0\3\16\1\0\3\16\3\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\11\16\1\221\20\16\15\0\3\16"+
    "\1\0\3\16\5\0\1\171\66\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\14\16\1\222\15\16\15\0\3\16"+
    "\1\0\3\16\7\0\1\223\74\0\1\176\46\0\1\176"+
    "\11\0\1\53\1\54\1\53\3\0\1\53\1\0\20\16"+
    "\1\224\11\16\15\0\3\16\1\0\3\16\3\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\23\16\1\225\6\16"+
    "\15\0\3\16\1\0\3\16\5\0\1\202\70\0\1\204"+
    "\66\0\1\53\1\54\1\53\3\0\1\53\1\0\11\16"+
    "\1\226\20\16\15\0\3\16\1\0\3\16\3\0\1\227"+
    "\1\230\1\227\3\0\1\227\1\0\32\16\15\0\3\16"+
    "\1\0\3\16\24\0\1\231\51\0\1\210\16\0\1\231"+
    "\47\0\1\53\1\54\1\53\3\0\1\53\1\0\4\16"+
    "\1\232\25\16\15\0\3\16\1\0\3\16\5\0\1\213"+
    "\66\0\1\53\1\54\1\53\3\0\1\53\1\0\15\16"+
    "\1\233\14\16\15\0\3\16\1\0\3\16\3\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\2\16\1\234\27\16"+
    "\15\0\3\16\1\0\3\16\3\0\1\235\1\236\1\235"+
    "\3\0\1\235\1\0\32\16\15\0\3\16\1\0\3\16"+
    "\3\0\1\237\1\240\1\237\3\0\1\237\1\0\32\16"+
    "\15\0\3\16\1\0\3\16\3\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\14\16\1\241\15\16\15\0\3\16"+
    "\1\0\3\16\3\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\17\16\1\242\12\16\15\0\3\16\1\0\3\16"+
    "\3\0\1\53\1\54\1\53\3\0\1\53\1\0\11\16"+
    "\1\243\20\16\15\0\3\16\1\0\3\16\3\0\1\244"+
    "\1\245\1\244\3\0\1\244\1\0\32\16\15\0\3\16"+
    "\1\0\3\16\5\0\1\227\106\0\1\246\50\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\13\16\1\247\16\16"+
    "\15\0\3\16\1\0\3\16\3\0\1\250\1\251\1\250"+
    "\3\0\1\250\1\0\32\16\15\0\3\16\1\0\3\16"+
    "\3\0\1\252\1\253\1\252\3\0\1\252\1\0\32\16"+
    "\15\0\3\16\1\0\3\16\5\0\1\235\70\0\1\237"+
    "\66\0\1\53\1\54\1\53\3\0\1\53\1\0\17\16"+
    "\1\254\12\16\15\0\3\16\1\0\3\16\3\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\16\16\1\255\13\16"+
    "\15\0\3\16\1\0\3\16\3\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\2\16\1\256\27\16\15\0\3\16"+
    "\1\0\3\16\5\0\1\244\111\0\1\257\45\0\1\260"+
    "\1\261\1\260\3\0\1\260\1\0\32\16\15\0\3\16"+
    "\1\0\3\16\5\0\1\250\112\0\1\262\46\0\1\252"+
    "\21\0\1\262\44\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\31\16\1\263\15\0\3\16\1\0\3\16\3\0"+
    "\1\53\1\54\1\53\3\0\1\53\1\0\11\16\1\264"+
    "\20\16\15\0\3\16\1\0\3\16\3\0\1\53\1\54"+
    "\1\53\3\0\1\53\1\0\3\16\1\265\26\16\15\0"+
    "\3\16\1\0\3\16\24\0\1\266\51\0\1\260\107\0"+
    "\1\267\47\0\1\270\1\271\1\270\3\0\1\270\1\0"+
    "\32\16\15\0\3\16\1\0\3\16\3\0\1\272\1\273"+
    "\1\272\3\0\1\272\1\0\32\16\15\0\3\16\1\0"+
    "\3\16\3\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\13\16\1\274\16\16\15\0\3\16\1\0\3\16\16\0"+
    "\1\275\114\0\1\276\33\0\1\270\34\0\1\276\33\0"+
    "\1\272\66\0\1\277\1\300\1\277\3\0\1\277\1\0"+
    "\32\16\15\0\3\16\1\0\3\16\21\0\1\301\73\0"+
    "\1\302\51\0\1\277\112\0\1\303\101\0\1\304\45\0"+
    "\1\305\116\0\1\306\54\0\1\307\70\0\1\310\73\0"+
    "\1\311\102\0\1\312\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9291];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\26\1\2\11\3\1\4\0"+
    "\1\1\2\0\1\11\23\1\6\11\2\1\1\11\4\0"+
    "\2\1\1\11\21\1\4\0\1\1\1\0\1\11\16\1"+
    "\1\11\3\1\1\11\2\1\1\0\2\1\1\0\2\1"+
    "\1\11\1\1\1\11\6\1\1\11\7\1\1\11\3\1"+
    "\1\11\1\1\1\0\3\1\1\11\1\1\1\11\4\1"+
    "\1\11\1\1\1\0\1\1\1\11\6\1\1\0\1\11"+
    "\1\1\1\0\3\1\1\11\1\0\2\1\1\11\2\1"+
    "\2\0\1\11\1\1\4\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    String token = "";
    int fixed = 0;
    String whites = "";

    private String longIdentifier(String text){
        if(text.length() > 31){
            return text.substring(0, 31);
        }else{
            return text;
        }
    }

    private String blankSpaces(int length){
        // allow 32 to be the max white space between token and the next word
        StringBuilder builder = new StringBuilder();
        for(int i = 0; i < 32 - length; i++){
            builder.append(" ");
        }
        return builder.toString();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return "*** Error en linea " + yyline + " caracter no reconocido " + yytext();
            }
          case 43: break;
          case 2: 
            { token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + "'" + token + "'";
            }
          case 44: break;
          case 3: 
            { // accion vacia: se ignoran los espacios y tabuladores
            }
          case 45: break;
          case 4: 
            { token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'" + token + "'";
            }
          case 46: break;
          case 5: 
            { whites = blankSpaces(1);
     return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'*'";
            }
          case 47: break;
          case 6: 
            { token = yytext();
    fixed = token.length() - 1;
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed +  " is intConstant  " + "(value = " + token + ")";
            }
          case 48: break;
          case 7: 
            { token = longIdentifier(yytext());
    fixed = yycolumn + token.length() - 2;
    whites = blankSpaces(token.length());
    if(yytext().length() <= 31)
        return token + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is identifier";
    else
        return token + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is identifier (truncated)";
            }
          case 49: break;
          case 8: 
            { whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'+'";
            }
          case 50: break;
          case 9: 
            { whites = blankSpaces(1);
     return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'-'";
            }
          case 51: break;
          case 10: 
            { return "*** Error en linea " + yyline + " identificador inválido: " + yytext();
            }
          case 52: break;
          case 11: 
            { token = yytext();
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + ",";
            }
          case 53: break;
          case 12: 
            { // ignore single line comments
            }
          case 54: break;
          case 13: 
            { fixed = yycolumn + 1;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is if";
            }
          case 55: break;
          case 14: 
            { fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'[]'";
            }
          case 56: break;
          case 15: 
            { fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'{}'";
            }
          case 57: break;
          case 16: 
            { fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'()'";
            }
          case 58: break;
          case 17: 
            { token = yytext();
    fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed +  " is " + "'" + token + "'";
            }
          case 59: break;
          case 18: 
            { token = yytext();
    fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'" + token + "'";
            }
          case 60: break;
          case 19: 
            { fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'||'";
            }
          case 61: break;
          case 20: 
            { token = yytext();
     fixed = token.length() - 1;
     whites = blankSpaces(token.length());
     return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is hexadecimal " + "(value = " + token + ")";
            }
          case 62: break;
          case 21: 
            { token = yytext();
    fixed = yycolumn + token.length() - 2;
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is string variable";
            }
          case 63: break;
          case 22: 
            { token = yytext();
    fixed = yycolumn + token.length() - 1;
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is float (value = " + token + ")";
            }
          case 64: break;
          case 23: 
            { fixed = yycolumn + 2;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is int";
            }
          case 65: break;
          case 24: 
            { fixed = yycolumn + 2;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is for";
            }
          case 66: break;
          case 25: 
            { fixed = yycolumn + 2;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is New";
            }
          case 67: break;
          case 26: 
            { // ignore multiline comments
            }
          case 68: break;
          case 27: 
            { fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is null";
            }
          case 69: break;
          case 28: 
            { fixed = yycolumn + 3;
    whites = blankSpaces(4);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is boolConstant (value = true)";
            }
          case 70: break;
          case 29: 
            { fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is this";
            }
          case 71: break;
          case 30: 
            { fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is void";
            }
          case 72: break;
          case 31: 
            { fixed = yycolumn + 4;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is break";
            }
          case 73: break;
          case 32: 
            { fixed = yycolumn + 4;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is class";
            }
          case 74: break;
          case 33: 
            { fixed = yycolumn + 4;
     whites = blankSpaces(5);
     return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is boolConstant (value = false)";
            }
          case 75: break;
          case 34: 
            { fixed = yycolumn + 4;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is while";
            }
          case 76: break;
          case 35: 
            { fixed = yycolumn + 5;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is double";
            }
          case 77: break;
          case 36: 
            { fixed = yycolumn + 5;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is string";
            }
          case 78: break;
          case 37: 
            { fixed = yycolumn + 6;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is extends";
            }
          case 79: break;
          case 38: 
            { fixed = yycolumn + 8;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is interface";
            }
          case 80: break;
          case 39: 
            { fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is else";
            }
          case 81: break;
          case 40: 
            { fixed = yycolumn + 9;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is implements";
            }
          case 82: break;
          case 41: 
            { fixed = yycolumn + 5;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is return";
            }
          case 83: break;
          case 42: 
            { fixed = yycolumn + 7;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is NewArray";
            }
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
