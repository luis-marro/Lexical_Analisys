/* The following code was generated by JFlex 1.6.1 */

package Lexical;

import java.io.*;
import java.util.LinkedList;
import java.util.List;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Lexical/lexer.flex</tt>
 */
public class Yylex {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\2\1\4\1\10\1\11\1\3\22\0\1\2\1\61\1\5"+
                    "\2\0\1\1\1\62\1\0\1\55\1\56\1\7\1\64\1\75\1\65"+
                    "\1\71\1\6\1\66\11\12\1\0\1\1\1\57\1\60\1\61\2\0"+
                    "\1\42\3\70\1\72\1\70\2\73\1\46\2\73\1\47\1\50\1\41"+
                    "\1\73\1\44\1\73\1\45\5\73\1\67\2\73\1\51\1\0\1\52"+
                    "\1\0\1\74\1\0\1\31\1\21\1\30\1\16\1\23\1\32\1\27"+
                    "\1\33\1\13\1\73\1\40\1\22\1\35\1\14\1\17\1\36\1\73"+
                    "\1\26\1\25\1\15\1\20\1\24\1\37\1\34\1\43\1\73\1\53"+
                    "\1\63\1\54\7\0\1\10\u1fa2\0\1\10\1\10\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\2\3\1\1\1\4\1\5\1\6"+
                    "\21\7\5\2\2\1\1\10\1\11\1\6\1\12\1\13"+
                    "\4\0\1\14\1\15\1\16\3\7\1\17\24\7\1\20"+
                    "\1\21\1\22\1\23\1\24\1\25\1\26\2\27\2\0"+
                    "\1\16\1\30\2\17\15\7\1\31\2\7\1\32\3\7"+
                    "\1\33\1\0\2\30\2\7\1\34\1\35\1\36\1\7"+
                    "\1\37\3\7\1\40\3\7\2\31\2\7\2\32\4\7"+
                    "\1\41\1\0\2\7\2\34\2\36\1\7\2\37\1\42"+
                    "\3\7\2\40\2\7\1\43\1\44\1\45\1\7\1\46"+
                    "\5\7\1\47\2\42\1\0\1\7\1\50\1\7\2\43"+
                    "\2\45\1\7\2\46\2\7\1\51\2\7\2\47\1\0"+
                    "\1\52\2\50\5\7\2\51\2\7\1\0\2\52\1\0"+
                    "\1\53\1\7\1\54\1\55\1\7\1\56\1\0\2\53"+
                    "\1\7\2\54\2\55\1\57\1\0\1\7\2\57\1\0"+
                    "\1\60\1\0\2\60\1\61";

    private static int [] zzUnpackAction() {
        int [] result = new int[224];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\76\0\76\0\174\0\272\0\370\0\u0136\0\76"+
                    "\0\u0174\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326"+
                    "\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516"+
                    "\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706"+
                    "\0\u0744\0\76\0\76\0\u0782\0\u07c0\0\u07fe\0\174\0\u083c"+
                    "\0\u087a\0\370\0\u08b8\0\u08f6\0\u0934\0\76\0\u0972\0\u09b0"+
                    "\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0"+
                    "\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90"+
                    "\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\76\0\76\0\76"+
                    "\0\76\0\76\0\76\0\u0f04\0\370\0\76\0\u0f42\0\u0f80"+
                    "\0\u0fbe\0\u0ffc\0\76\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132"+
                    "\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322"+
                    "\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512"+
                    "\0\76\0\u1550\0\76\0\u158e\0\u15cc\0\u160a\0\u1648\0\u02aa"+
                    "\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838"+
                    "\0\u1876\0\u18b4\0\76\0\u18f2\0\u1930\0\u196e\0\76\0\u19ac"+
                    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1ae2\0\u1b20\0\u1b5e"+
                    "\0\76\0\u1b9c\0\76\0\u1bda\0\u1c18\0\76\0\u1c56\0\u1c94"+
                    "\0\u1cd2\0\u1d10\0\u1d4e\0\76\0\u1d8c\0\u1dca\0\u1e08\0\u1e46"+
                    "\0\u02aa\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8"+
                    "\0\u2036\0\u2074\0\76\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa"+
                    "\0\76\0\u21e8\0\76\0\u2226\0\u2264\0\76\0\u22a2\0\u22e0"+
                    "\0\u231e\0\u235c\0\u239a\0\u23d8\0\76\0\u2416\0\u2454\0\u2492"+
                    "\0\76\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\76"+
                    "\0\u2644\0\u2682\0\u26c0\0\u26fe\0\76\0\u273c\0\u277a\0\u27b8"+
                    "\0\u27f6\0\u2834\0\u2872\0\u28b0\0\76\0\u28ee\0\76\0\u292c"+
                    "\0\u296a\0\76\0\u29a8\0\76\0\u29e6\0\u2a24\0\u2a62\0\u2aa0"+
                    "\0\76\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\76\0\u2bd6\0\76";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[224];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\10"+
                    "\1\0\1\4\1\11\1\12\1\13\1\14\1\15\2\16"+
                    "\1\17\1\16\1\20\1\21\1\22\1\23\1\16\1\24"+
                    "\1\16\1\25\4\16\1\26\1\16\1\27\2\16\1\30"+
                    "\1\31\2\16\1\32\1\33\1\3\1\34\1\3\1\35"+
                    "\1\3\1\36\1\3\1\37\1\40\1\41\1\42\1\43"+
                    "\1\44\2\16\1\3\2\16\1\45\1\46\100\0\3\47"+
                    "\4\0\1\47\63\0\1\46\2\0\2\47\1\4\4\0"+
                    "\1\47\63\0\1\46\3\50\2\51\1\52\2\50\2\51"+
                    "\64\50\6\0\1\53\1\54\100\0\1\11\36\45\15\0"+
                    "\1\11\2\45\1\55\3\45\3\0\1\56\1\57\1\56"+
                    "\4\0\1\56\2\16\1\60\15\16\1\61\2\16\1\62"+
                    "\13\16\15\0\3\16\1\0\3\16\3\0\1\56\1\57"+
                    "\1\56\4\0\1\56\6\16\1\63\30\16\15\0\3\16"+
                    "\1\0\3\16\3\0\1\56\1\57\1\56\4\0\1\56"+
                    "\14\16\1\64\4\16\1\65\15\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\56\1\57\1\56\4\0\1\56\5\16"+
                    "\1\66\31\16\15\0\3\16\1\0\3\16\3\0\1\56"+
                    "\1\57\1\56\4\0\1\56\37\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\56\1\57\1\56\4\0\1\56\5\16"+
                    "\1\67\6\16\1\70\22\16\15\0\3\16\1\0\3\16"+
                    "\3\0\1\56\1\57\1\56\4\0\1\56\10\16\1\71"+
                    "\11\16\1\72\14\16\15\0\3\16\1\0\3\16\3\0"+
                    "\1\56\1\57\1\56\4\0\1\56\5\16\1\73\31\16"+
                    "\15\0\3\16\1\0\3\16\3\0\1\56\1\57\1\56"+
                    "\4\0\1\56\3\16\1\74\33\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\56\1\57\1\56\4\0\1\56\11\16"+
                    "\1\75\25\16\15\0\3\16\1\0\3\16\3\0\1\56"+
                    "\1\57\1\56\4\0\1\56\10\16\1\76\26\16\15\0"+
                    "\3\16\1\0\3\16\3\0\1\56\1\57\1\56\4\0"+
                    "\1\56\5\16\1\77\11\16\1\100\17\16\15\0\3\16"+
                    "\1\0\3\16\3\0\1\56\1\57\1\56\4\0\1\56"+
                    "\21\16\1\101\15\16\15\0\3\16\1\0\3\16\3\0"+
                    "\1\56\1\57\1\56\4\0\1\56\11\16\1\102\25\16"+
                    "\15\0\3\16\1\0\3\16\3\0\1\56\1\57\1\56"+
                    "\4\0\1\56\14\16\1\103\22\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\56\1\57\1\56\4\0\1\56\11\16"+
                    "\1\104\25\16\15\0\3\16\1\0\3\16\3\0\1\56"+
                    "\1\57\1\56\4\0\1\56\17\16\1\105\17\16\15\0"+
                    "\3\16\1\0\3\16\53\0\1\106\77\0\1\107\77\0"+
                    "\1\110\77\0\1\111\75\0\1\112\77\0\1\112\76\0"+
                    "\1\113\24\0\1\11\21\45\1\114\14\45\15\0\1\11"+
                    "\1\114\1\45\1\55\3\45\13\0\37\45\15\0\3\45"+
                    "\1\0\3\45\3\0\3\46\4\0\1\46\64\0\3\50"+
                    "\2\51\1\115\2\50\2\51\64\50\5\0\1\116\70\0"+
                    "\3\53\2\0\3\53\2\0\64\53\6\54\1\117\1\120"+
                    "\66\54\12\0\1\121\53\0\1\121\13\0\1\56\73\0"+
                    "\1\56\1\57\1\56\4\0\1\56\3\16\1\122\33\16"+
                    "\15\0\3\16\1\0\3\16\3\0\1\123\1\124\1\123"+
                    "\4\0\1\123\37\16\15\0\3\16\1\0\3\16\3\0"+
                    "\1\56\1\57\1\56\4\0\1\56\24\16\1\125\12\16"+
                    "\15\0\3\16\1\0\3\16\3\0\1\56\1\57\1\56"+
                    "\4\0\1\56\10\16\1\126\26\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\56\1\57\1\56\4\0\1\56\6\16"+
                    "\1\127\30\16\15\0\3\16\1\0\3\16\3\0\1\56"+
                    "\1\57\1\56\4\0\1\56\1\16\1\130\35\16\15\0"+
                    "\3\16\1\0\3\16\3\0\1\56\1\57\1\56\4\0"+
                    "\1\56\6\16\1\131\30\16\15\0\3\16\1\0\3\16"+
                    "\3\0\1\56\1\57\1\56\4\0\1\56\5\16\1\132"+
                    "\31\16\15\0\3\16\1\0\3\16\3\0\1\56\1\57"+
                    "\1\56\4\0\1\56\11\16\1\133\25\16\15\0\3\16"+
                    "\1\0\3\16\3\0\1\56\1\57\1\56\4\0\1\56"+
                    "\13\16\1\134\23\16\15\0\3\16\1\0\3\16\3\0"+
                    "\1\56\1\57\1\56\4\0\1\56\3\16\1\135\33\16"+
                    "\15\0\3\16\1\0\3\16\3\0\1\56\1\57\1\56"+
                    "\4\0\1\56\1\16\1\136\35\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\56\1\57\1\56\4\0\1\56\14\16"+
                    "\1\137\22\16\15\0\3\16\1\0\3\16\3\0\1\56"+
                    "\1\57\1\56\4\0\1\56\3\16\1\140\33\16\15\0"+
                    "\3\16\1\0\3\16\3\0\1\56\1\57\1\56\4\0"+
                    "\1\56\17\16\1\141\17\16\15\0\3\16\1\0\3\16"+
                    "\3\0\1\56\1\57\1\56\4\0\1\56\14\16\1\142"+
                    "\22\16\15\0\3\16\1\0\3\16\3\0\1\56\1\57"+
                    "\1\56\4\0\1\56\10\16\1\143\26\16\15\0\3\16"+
                    "\1\0\3\16\3\0\1\56\1\57\1\56\4\0\1\56"+
                    "\1\16\1\144\35\16\15\0\3\16\1\0\3\16\3\0"+
                    "\1\56\1\57\1\56\4\0\1\56\25\16\1\145\11\16"+
                    "\15\0\3\16\1\0\3\16\3\0\1\56\1\57\1\56"+
                    "\4\0\1\56\1\16\1\146\35\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\56\1\57\1\56\4\0\1\56\17\16"+
                    "\1\147\17\16\15\0\3\16\1\0\3\16\3\0\1\56"+
                    "\1\57\1\56\4\0\1\56\10\16\1\150\26\16\15\0"+
                    "\3\16\1\0\3\16\13\0\1\114\3\45\1\114\2\45"+
                    "\1\114\1\45\1\114\4\45\3\114\7\45\1\114\6\45"+
                    "\15\0\1\114\1\45\1\114\1\0\1\114\2\45\1\0"+
                    "\7\117\1\120\74\117\1\151\1\120\66\117\12\0\1\121"+
                    "\10\0\1\152\42\0\1\121\3\0\1\152\5\0\1\153"+
                    "\1\154\1\153\4\0\1\153\11\16\1\155\25\16\15\0"+
                    "\3\16\1\0\3\16\5\0\1\123\73\0\1\56\1\57"+
                    "\1\56\4\0\1\56\10\16\1\156\26\16\15\0\3\16"+
                    "\1\0\3\16\3\0\1\56\1\57\1\56\4\0\1\56"+
                    "\10\16\1\157\26\16\15\0\3\16\1\0\3\16\3\0"+
                    "\1\56\1\57\1\56\4\0\1\56\11\16\1\160\25\16"+
                    "\15\0\3\16\1\0\3\16\3\0\1\56\1\57\1\56"+
                    "\4\0\1\56\13\16\1\161\23\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\56\1\57\1\56\4\0\1\56\7\16"+
                    "\1\162\27\16\15\0\3\16\1\0\3\16\3\0\1\56"+
                    "\1\57\1\56\4\0\1\56\10\16\1\163\26\16\15\0"+
                    "\3\16\1\0\3\16\3\0\1\56\1\57\1\56\4\0"+
                    "\1\56\17\16\1\164\17\16\15\0\3\16\1\0\3\16"+
                    "\3\0\1\56\1\57\1\56\4\0\1\56\11\16\1\165"+
                    "\25\16\15\0\3\16\1\0\3\16\3\0\1\56\1\57"+
                    "\1\56\4\0\1\56\11\16\1\166\25\16\15\0\3\16"+
                    "\1\0\3\16\3\0\1\56\1\57\1\56\4\0\1\56"+
                    "\4\16\1\167\32\16\15\0\3\16\1\0\3\16\3\0"+
                    "\1\56\1\57\1\56\4\0\1\56\1\16\1\170\35\16"+
                    "\15\0\3\16\1\0\3\16\3\0\1\56\1\57\1\56"+
                    "\4\0\1\56\6\16\1\171\30\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\56\1\57\1\56\4\0\1\56\13\16"+
                    "\1\172\23\16\15\0\3\16\1\0\3\16\3\0\1\173"+
                    "\1\174\1\173\4\0\1\173\37\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\56\1\57\1\56\4\0\1\56\13\16"+
                    "\1\175\23\16\15\0\3\16\1\0\3\16\3\0\1\56"+
                    "\1\57\1\56\4\0\1\56\10\16\1\176\26\16\15\0"+
                    "\3\16\1\0\3\16\3\0\1\177\1\200\1\177\4\0"+
                    "\1\177\30\16\1\201\6\16\15\0\3\16\1\0\3\16"+
                    "\3\0\1\56\1\57\1\56\4\0\1\56\2\16\1\202"+
                    "\34\16\15\0\3\16\1\0\3\16\3\0\1\56\1\57"+
                    "\1\56\4\0\1\56\4\16\1\203\32\16\15\0\3\16"+
                    "\1\0\3\16\3\0\1\56\1\57\1\56\4\0\1\56"+
                    "\10\16\1\204\26\16\15\0\3\16\1\0\3\16\13\0"+
                    "\1\205\51\0\2\206\1\205\13\0\1\153\73\0\1\56"+
                    "\1\57\1\56\4\0\1\56\14\16\1\207\22\16\15\0"+
                    "\3\16\1\0\3\16\3\0\1\56\1\57\1\56\4\0"+
                    "\1\56\11\16\1\210\25\16\15\0\3\16\1\0\3\16"+
                    "\3\0\1\211\1\212\1\211\4\0\1\211\37\16\15\0"+
                    "\3\16\1\0\3\16\3\0\1\213\1\214\1\213\4\0"+
                    "\1\213\37\16\15\0\3\16\1\0\3\16\3\0\1\56"+
                    "\1\57\1\56\4\0\1\56\10\16\1\215\26\16\15\0"+
                    "\3\16\1\0\3\16\3\0\1\216\1\217\1\216\4\0"+
                    "\1\216\37\16\15\0\3\16\1\0\3\16\3\0\1\56"+
                    "\1\57\1\56\4\0\1\56\26\16\1\220\10\16\15\0"+
                    "\3\16\1\0\3\16\3\0\1\221\1\222\1\221\4\0"+
                    "\1\221\37\16\15\0\3\16\1\0\3\16\3\0\1\56"+
                    "\1\57\1\56\4\0\1\56\2\16\1\223\34\16\15\0"+
                    "\3\16\1\0\3\16\3\0\1\224\1\225\1\224\4\0"+
                    "\1\224\37\16\15\0\3\16\1\0\3\16\3\0\1\56"+
                    "\1\57\1\56\4\0\1\56\2\16\1\226\34\16\15\0"+
                    "\3\16\1\0\3\16\3\0\1\56\1\57\1\56\4\0"+
                    "\1\56\14\16\1\227\22\16\15\0\3\16\1\0\3\16"+
                    "\3\0\1\56\1\57\1\56\4\0\1\56\13\16\1\230"+
                    "\23\16\15\0\3\16\1\0\3\16\5\0\1\173\73\0"+
                    "\1\56\1\57\1\56\4\0\1\56\11\16\1\231\25\16"+
                    "\15\0\3\16\1\0\3\16\3\0\1\56\1\57\1\56"+
                    "\4\0\1\56\11\16\1\232\25\16\15\0\3\16\1\0"+
                    "\3\16\5\0\1\177\73\0\1\56\1\57\1\56\4\0"+
                    "\1\56\14\16\1\233\22\16\15\0\3\16\1\0\3\16"+
                    "\3\0\1\56\1\57\1\56\4\0\1\56\3\16\1\234"+
                    "\33\16\15\0\3\16\1\0\3\16\3\0\1\56\1\57"+
                    "\1\56\4\0\1\56\34\16\1\235\1\236\1\16\15\0"+
                    "\3\16\1\0\3\16\3\0\1\56\1\57\1\56\4\0"+
                    "\1\56\5\16\1\237\31\16\15\0\3\16\1\0\3\16"+
                    "\13\0\1\205\53\0\1\205\11\0\1\56\1\57\1\56"+
                    "\4\0\1\56\20\16\1\240\16\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\56\1\57\1\56\4\0\1\56\23\16"+
                    "\1\241\13\16\15\0\3\16\1\0\3\16\5\0\1\211"+
                    "\75\0\1\213\73\0\1\56\1\57\1\56\4\0\1\56"+
                    "\11\16\1\242\25\16\15\0\3\16\1\0\3\16\5\0"+
                    "\1\216\73\0\1\243\1\244\1\243\4\0\1\243\37\16"+
                    "\15\0\3\16\1\0\3\16\24\0\1\245\56\0\1\221"+
                    "\16\0\1\245\54\0\1\56\1\57\1\56\4\0\1\56"+
                    "\4\16\1\246\32\16\15\0\3\16\1\0\3\16\5\0"+
                    "\1\224\73\0\1\56\1\57\1\56\4\0\1\56\15\16"+
                    "\1\247\21\16\15\0\3\16\1\0\3\16\3\0\1\56"+
                    "\1\57\1\56\4\0\1\56\2\16\1\250\34\16\15\0"+
                    "\3\16\1\0\3\16\3\0\1\251\1\252\1\251\4\0"+
                    "\1\251\37\16\15\0\3\16\1\0\3\16\3\0\1\253"+
                    "\1\254\1\253\4\0\1\253\37\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\56\1\57\1\56\4\0\1\56\14\16"+
                    "\1\255\22\16\15\0\3\16\1\0\3\16\3\0\1\256"+
                    "\1\257\1\256\4\0\1\256\37\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\56\1\57\1\56\4\0\1\56\2\16"+
                    "\1\260\34\16\15\0\3\16\1\0\3\16\3\0\1\56"+
                    "\1\57\1\56\4\0\1\56\1\16\1\261\35\16\15\0"+
                    "\3\16\1\0\3\16\3\0\1\56\1\57\1\56\4\0"+
                    "\1\56\16\16\1\262\20\16\15\0\3\16\1\0\3\16"+
                    "\3\0\1\56\1\57\1\56\4\0\1\56\17\16\1\263"+
                    "\17\16\15\0\3\16\1\0\3\16\3\0\1\56\1\57"+
                    "\1\56\4\0\1\56\11\16\1\264\25\16\15\0\3\16"+
                    "\1\0\3\16\3\0\1\265\1\266\1\265\4\0\1\265"+
                    "\37\16\15\0\3\16\1\0\3\16\5\0\1\243\113\0"+
                    "\1\267\55\0\1\56\1\57\1\56\4\0\1\56\13\16"+
                    "\1\270\23\16\15\0\3\16\1\0\3\16\3\0\1\271"+
                    "\1\272\1\271\4\0\1\271\37\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\273\1\274\1\273\4\0\1\273\37\16"+
                    "\15\0\3\16\1\0\3\16\5\0\1\251\75\0\1\253"+
                    "\73\0\1\56\1\57\1\56\4\0\1\56\17\16\1\275"+
                    "\17\16\15\0\3\16\1\0\3\16\5\0\1\256\73\0"+
                    "\1\56\1\57\1\56\4\0\1\56\3\16\1\276\33\16"+
                    "\15\0\3\16\1\0\3\16\3\0\1\56\1\57\1\56"+
                    "\4\0\1\56\2\16\1\277\34\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\300\1\301\1\300\4\0\1\300\37\16"+
                    "\15\0\3\16\1\0\3\16\3\0\1\56\1\57\1\56"+
                    "\4\0\1\56\16\16\1\302\20\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\56\1\57\1\56\4\0\1\56\2\16"+
                    "\1\303\34\16\15\0\3\16\1\0\3\16\5\0\1\265"+
                    "\116\0\1\304\52\0\1\305\1\306\1\305\4\0\1\305"+
                    "\37\16\15\0\3\16\1\0\3\16\5\0\1\271\117\0"+
                    "\1\307\53\0\1\273\21\0\1\307\51\0\1\56\1\57"+
                    "\1\56\4\0\1\56\31\16\1\310\5\16\15\0\3\16"+
                    "\1\0\3\16\3\0\1\56\1\57\1\56\4\0\1\56"+
                    "\11\16\1\311\25\16\15\0\3\16\1\0\3\16\3\0"+
                    "\1\56\1\57\1\56\4\0\1\56\11\16\1\312\25\16"+
                    "\15\0\3\16\1\0\3\16\5\0\1\300\73\0\1\56"+
                    "\1\57\1\56\4\0\1\56\11\16\1\313\25\16\15\0"+
                    "\3\16\1\0\3\16\3\0\1\56\1\57\1\56\4\0"+
                    "\1\56\3\16\1\314\33\16\15\0\3\16\1\0\3\16"+
                    "\24\0\1\315\56\0\1\305\114\0\1\316\54\0\1\317"+
                    "\1\320\1\317\4\0\1\317\37\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\56\1\57\1\56\4\0\1\56\15\16"+
                    "\1\321\21\16\15\0\3\16\1\0\3\16\3\0\1\322"+
                    "\1\323\1\322\4\0\1\322\37\16\15\0\3\16\1\0"+
                    "\3\16\3\0\1\324\1\325\1\324\4\0\1\324\37\16"+
                    "\15\0\3\16\1\0\3\16\3\0\1\56\1\57\1\56"+
                    "\4\0\1\56\13\16\1\326\23\16\15\0\3\16\1\0"+
                    "\3\16\16\0\1\327\64\0\1\317\73\0\1\56\1\57"+
                    "\1\56\4\0\1\56\11\16\1\330\25\16\15\0\3\16"+
                    "\1\0\3\16\5\0\1\322\75\0\1\324\73\0\1\331"+
                    "\1\332\1\331\4\0\1\331\37\16\15\0\3\16\1\0"+
                    "\3\16\21\0\1\333\57\0\1\56\1\57\1\56\4\0"+
                    "\1\56\14\16\1\334\22\16\15\0\3\16\1\0\3\16"+
                    "\5\0\1\331\117\0\1\335\51\0\1\336\1\337\1\336"+
                    "\4\0\1\336\37\16\15\0\3\16\1\0\3\16\15\0"+
                    "\1\340\65\0\1\336\71\0";

    private static int [] zzUnpackTrans() {
        int [] result = new int[11284];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\2\11\4\1\1\11\31\1\2\11\3\1\4\0"+
                    "\3\1\1\11\27\1\6\11\2\1\1\11\2\0\2\1"+
                    "\1\11\25\1\1\11\1\0\1\11\17\1\1\11\3\1"+
                    "\1\11\6\1\1\0\2\1\1\11\1\1\1\11\2\1"+
                    "\1\11\5\1\1\11\16\1\1\11\1\1\1\0\3\1"+
                    "\1\11\1\1\1\11\2\1\1\11\6\1\1\11\1\1"+
                    "\1\0\1\1\1\11\6\1\1\11\3\1\1\0\1\11"+
                    "\1\1\1\0\5\1\1\11\1\0\1\11\2\1\1\11"+
                    "\1\1\1\11\2\1\1\0\1\1\1\11\1\1\1\0"+
                    "\1\1\1\0\1\11\1\1\1\11";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[224];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    String token = "";
    int fixed = 0;
    String whites = "";
    public List<String> errors = new LinkedList<String>();

    public List<String> getError(){
        return errors;
    }

    private String longIdentifier(String text){
        if(text.length() > 31){
            return text.substring(0, 31);
        }else{
            return text;
        }
    }

    private String blankSpaces(int length){
        // allow 32 to be the max white space between token and the next word
        StringBuilder builder = new StringBuilder();
        for(int i = 0; i < 32 - length; i++){
            builder.append(" ");
        }
        return builder.toString();
    }


    /**
     * Creates a new scanner
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public Yylex(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return         the unpacked character translation table
     */
    private static char [] zzUnpackCMap(String packed) {
        char [] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 208) {
            int  count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead-zzStartRead);

            /* translate stored positions */
            zzEndRead-= zzStartRead;
            zzCurrentPos-= zzStartRead;
            zzMarkedPos-= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length*2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead+pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number)  {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    public String yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char [] zzBufferL = zzBuffer;
        char [] zzCMapL = ZZ_CMAP;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead  ;
                 zzCurrentPosL < zzMarkedPosL ;
                 zzCurrentPosL += zzCharCount ) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ( (zzAttributes & 1) == 1 ) {
                zzAction = zzState;
            }


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    }
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            }
            else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1:
                    { errors.add("*** Error en linea " + yyline + " caracter no reconocido " + yytext());
                        return "*** Error en linea " + yyline + " caracter no reconocido " + yytext();
                    }
                    case 50: break;
                    case 2:
                    { token = yytext();
                        whites = blankSpaces(1);
                        return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + "'" + token + "'";
                    }
                    case 51: break;
                    case 3:
                    { // accion vacia: se ignoran los espacios y tabuladores
                    }
                    case 52: break;
                    case 4:
                    { token = yytext();
                        whites = blankSpaces(1);
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'" + token + "'";
                    }
                    case 53: break;
                    case 5:
                    { whites = blankSpaces(1);
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'*'";
                    }
                    case 54: break;
                    case 6:
                    { token = yytext();
                        fixed = (token.length() == 1) ? fixed = yycolumn : token.length() - 1;
                        whites = blankSpaces(token.length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed +  " is intConstant  " + "(value = " + token + ")";
                    }
                    case 55: break;
                    case 7:
                    { token = longIdentifier(yytext());
                        fixed = (token.length() == 1) ? (yycolumn) : yycolumn + token.length() - 2;
                        whites = blankSpaces(token.length());
                        if(yytext().length() <= 31)
                            return token + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is identifier";
                        else
                            return token + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is identifier (truncated)";
                    }
                    case 56: break;
                    case 8:
                    { whites = blankSpaces(1);
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'+'";
                    }
                    case 57: break;
                    case 9:
                    { whites = blankSpaces(1);
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'-'";
                    }
                    case 58: break;
                    case 10:
                    { errors.add("*** Error en linea " + yyline + " identificador inválido: " + yytext());
                        return "*** Error en linea " + yyline + " identificador inválido: " + yytext();
                    }
                    case 59: break;
                    case 11:
                    { token = yytext();
                        whites = blankSpaces(token.length());
                        return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + ",";
                    }
                    case 60: break;
                    case 12:
                    { // ignore single line comments
                    }
                    case 61: break;
                    case 13:
                    { //errors.add(yytext() + "comment not closed");
                        //return yytext() + "comment not closed";
                    }
                    case 62: break;
                    case 14:
                    { token = yytext();
                        fixed = yycolumn + token.length() - 1;
                        whites = blankSpaces(token.length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is double (value = " + token + ")";
                    }
                    case 63: break;
                    case 15:
                    { fixed = yycolumn + 1;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is if";
                    }
                    case 64: break;
                    case 16:
                    { fixed = yycolumn + 1;
                        whites = blankSpaces(2);
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'[]'";
                    }
                    case 65: break;
                    case 17:
                    { fixed = yycolumn + 1;
                        whites = blankSpaces(2);
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'{}'";
                    }
                    case 66: break;
                    case 18:
                    { fixed = yycolumn + 1;
                        whites = blankSpaces(2);
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'()'";
                    }
                    case 67: break;
                    case 19:
                    { token = yytext();
                        fixed = yycolumn + 1;
                        whites = blankSpaces(2);
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed +  " is " + "'" + token + "'";
                    }
                    case 68: break;
                    case 20:
                    { token = yytext();
                        fixed = yycolumn + 1;
                        whites = blankSpaces(2);
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'" + token + "'";
                    }
                    case 69: break;
                    case 21:
                    { fixed = yycolumn + 1;
                        whites = blankSpaces(2);
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'||'";
                    }
                    case 70: break;
                    case 22:
                    { token = yytext();
                        fixed = token.length() - 1;
                        whites = blankSpaces(token.length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is hexadecimal " + "(value = " + token + ")";
                    }
                    case 71: break;
                    case 23:
                    { token = yytext();
                        fixed = yycolumn + token.length() - 2;
                        whites = blankSpaces(token.length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is string constant (Value = " + yytext() + " )" ;
                    }
                    case 72: break;
                    case 24:
                    { fixed = yycolumn + 2;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is int";
                    }
                    case 73: break;
                    case 25:
                    { fixed = yycolumn + 2;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is for";
                    }
                    case 74: break;
                    case 26:
                    { fixed = yycolumn + 2;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is New";
                    }
                    case 75: break;
                    case 27:
                    { // ignore multiline comments
                        //return "Comentario multi linea";
                    }
                    case 76: break;
                    case 28:
                    { fixed = yycolumn + 3;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is null";
                    }
                    case 77: break;
                    case 29:
                    { fixed = yycolumn + 3;
                        whites = blankSpaces(4);
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is boolConstant (value = true)";
                    }
                    case 78: break;
                    case 30:
                    { fixed = yycolumn + 3;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is this";
                    }
                    case 79: break;
                    case 31:
                    { fixed = yycolumn + 3;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is bool";
                    }
                    case 80: break;
                    case 32:
                    { fixed = yycolumn + 3;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is void";
                    }
                    case 81: break;
                    case 33:
                    { // Give priority to doubles with exponential values
                        token = yytext();
                        fixed = yycolumn + token.length() - 1;
                        whites = blankSpaces(token.length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is double (value = " + token + ")";
                    }
                    case 82: break;
                    case 34:
                    { fixed = yycolumn + 4;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is break";
                    }
                    case 83: break;
                    case 35:
                    { fixed = yycolumn + 4;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is class";
                    }
                    case 84: break;
                    case 36:
                    { fixed = yycolumn + 4;
                        whites = blankSpaces(5);
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is boolConstant (value = false)";
                    }
                    case 85: break;
                    case 37:
                    { fixed = yycolumn + 4;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is while";
                    }
                    case 86: break;
                    case 38:
                    { fixed = yycolumn + 4;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is Print";
                    }
                    case 87: break;
                    case 39:
                    { fixed = yycolumn + 5;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is double";
                    }
                    case 88: break;
                    case 40:
                    { fixed = yycolumn + 5;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is string";
                    }
                    case 89: break;
                    case 41:
                    { fixed = yycolumn + 5;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is Malloc";
                    }
                    case 90: break;
                    case 42:
                    { fixed = yycolumn + 6;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is extends";
                    }
                    case 91: break;
                    case 43:
                    { fixed = yycolumn + 7;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is NewArray";
                    }
                    case 92: break;
                    case 44:
                    { fixed = yycolumn + 7;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is ReadLine";
                    }
                    case 93: break;
                    case 45:
                    { fixed = yycolumn + 8;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is interface";
                    }
                    case 94: break;
                    case 46:
                    { fixed = yycolumn + 3;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is else";
                    }
                    case 95: break;
                    case 47:
                    { fixed = yycolumn + 9;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is implements";
                    }
                    case 96: break;
                    case 48:
                    { fixed = yycolumn + 10;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is ReadInteger";
                    }
                    case 97: break;
                    case 49:
                    { fixed = yycolumn + 5;
                        whites = blankSpaces(yytext().length());
                        return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is return";
                    }
                    case 98: break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
