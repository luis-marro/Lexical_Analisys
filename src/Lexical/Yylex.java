/* The following code was generated by JFlex 1.6.1 */

package Lexical;

import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Lexical/lexer.flex</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\10\1\11\1\3\22\0\1\5\1\62\1\6"+
    "\2\0\1\1\1\63\1\0\1\56\1\57\1\12\1\65\1\73\1\66"+
    "\1\67\1\7\1\14\1\74\1\21\1\74\6\21\1\0\1\1\1\60"+
    "\1\61\1\62\2\0\1\50\3\20\1\70\1\20\7\71\1\47\11\71"+
    "\1\17\2\71\1\52\1\0\1\53\1\0\1\72\1\0\1\40\1\30"+
    "\1\37\1\25\1\32\1\41\1\36\1\42\1\22\1\71\1\46\1\31"+
    "\1\43\1\23\1\26\1\44\1\71\1\35\1\34\1\24\1\27\1\33"+
    "\1\45\1\15\1\51\1\71\1\54\1\64\1\55\7\0\1\10\u1f96\0"+
    "\1\13\1\16\12\0\1\10\1\10\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\1\1\2\1\4\1\1"+
    "\1\5\1\1\1\5\15\1\5\2\2\1\1\6\1\7"+
    "\1\2\1\10\1\0\1\11\1\12\2\0\2\10\2\0"+
    "\1\13\1\0\2\13\1\0\1\14\20\0\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\5\0\1\23\1\24\1\25"+
    "\2\14\14\0\1\26\2\0\1\27\4\0\1\30\1\23"+
    "\1\10\2\25\2\0\1\31\1\32\1\33\4\0\1\34"+
    "\3\0\2\26\2\0\2\27\2\0\1\30\1\24\3\0"+
    "\2\31\2\33\1\0\1\35\3\0\1\13\2\34\2\0"+
    "\1\36\1\37\1\40\1\0\1\30\1\24\2\0\1\41"+
    "\2\35\2\0\1\42\1\0\2\36\2\40\3\0\2\41"+
    "\1\43\1\0\2\42\2\0\1\13\3\0\2\43\3\0"+
    "\1\44\1\0\1\45\3\0\1\13\2\44\1\46\2\0"+
    "\2\46\4\0\1\47\4\0\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\75\0\75\0\172\0\267\0\364\0\75"+
    "\0\u0131\0\u016e\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc"+
    "\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac"+
    "\0\75\0\75\0\u06e9\0\u06e9\0\267\0\267\0\u0726\0\u0763"+
    "\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u0857\0\u01ab\0\75"+
    "\0\u01ab\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f"+
    "\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27"+
    "\0\u0c64\0\u0ca1\0\u0cde\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u07dd\0\u0e4c"+
    "\0\u0e89\0\u0857\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u0d1b"+
    "\0\75\0\u13c7\0\u0857\0\u1404\0\u1441\0\u147e\0\u14bb\0\u01ab"+
    "\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3"+
    "\0\u16e0\0\u0857\0\u171d\0\u175a\0\u1797\0\u0857\0\u17d4\0\u1811"+
    "\0\u184e\0\u0d95\0\u188b\0\u18c8\0\u1905\0\u1942\0\u0857\0\u197f"+
    "\0\u0857\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1ab0"+
    "\0\u0857\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u01ab\0\u1c1e\0\u1c5b"+
    "\0\75\0\u18c8\0\u1c98\0\u1cd5\0\u1d12\0\u0857\0\u1d4f\0\u1d8c"+
    "\0\u1dc9\0\u1e06\0\u1e43\0\u0857\0\u1e80\0\u0857\0\u1ebd\0\u1efa"+
    "\0\u1f37\0\u1f74\0\u0857\0\u1fb1\0\u1fee\0\u202b\0\u0857\0\u2068"+
    "\0\u20a5\0\u20e2\0\u20a5\0\u211f\0\u215c\0\u2199\0\u0857\0\u21d6"+
    "\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\75\0\u2344\0\u2381"+
    "\0\u23be\0\u2381\0\u0857\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u0857"+
    "\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\75\0\u2620\0\u265d"+
    "\0\u269a\0\u26d7\0\75";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\4\1\6\1\7\1\0"+
    "\1\4\1\10\1\11\1\12\1\13\1\2\2\13\1\14"+
    "\1\15\1\16\1\17\1\20\2\13\1\21\1\13\1\22"+
    "\1\23\1\24\1\25\1\13\1\26\1\13\1\27\3\13"+
    "\1\30\1\13\1\31\2\13\1\32\1\3\1\33\1\3"+
    "\1\34\1\3\1\35\1\3\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\2\13\1\44\1\3\1\14\101\0\1\4"+
    "\70\0\3\45\2\0\1\45\1\46\1\45\2\0\63\45"+
    "\7\0\1\47\2\0\1\50\76\0\1\51\74\0\1\14"+
    "\1\44\1\0\1\52\1\44\1\14\30\44\15\0\1\53"+
    "\3\44\1\0\1\14\2\0\1\54\1\55\1\54\1\56"+
    "\3\0\1\54\2\0\2\57\1\0\33\57\16\0\3\57"+
    "\1\60\1\61\14\0\1\14\1\44\1\0\2\44\1\14"+
    "\30\44\15\0\1\53\3\44\1\0\1\14\2\0\1\54"+
    "\1\55\1\54\1\56\3\0\1\54\2\0\2\57\1\0"+
    "\4\57\1\62\15\57\1\63\1\57\1\64\6\57\16\0"+
    "\3\57\1\60\1\61\2\0\1\54\1\55\1\54\1\56"+
    "\3\0\1\54\2\0\2\57\1\0\10\57\1\65\22\57"+
    "\16\0\3\57\1\60\1\61\2\0\1\54\1\55\1\54"+
    "\1\56\3\0\1\54\2\0\2\57\1\0\16\57\1\66"+
    "\4\57\1\67\7\57\16\0\3\57\1\60\1\61\2\0"+
    "\1\54\1\55\1\54\1\56\3\0\1\54\2\0\2\57"+
    "\1\0\7\57\1\70\23\57\16\0\3\57\1\60\1\61"+
    "\2\0\1\54\1\55\1\54\1\56\3\0\1\54\2\0"+
    "\2\57\1\0\16\57\1\71\14\57\16\0\3\57\1\60"+
    "\1\61\2\0\1\54\1\55\1\54\1\56\3\0\1\54"+
    "\2\0\1\57\1\72\1\0\12\57\1\73\20\57\16\0"+
    "\3\57\1\60\1\61\2\0\1\54\1\55\1\54\1\56"+
    "\3\0\1\54\2\0\2\57\1\0\7\57\1\74\23\57"+
    "\16\0\3\57\1\60\1\61\2\0\1\54\1\55\1\54"+
    "\1\56\3\0\1\54\2\0\2\57\1\0\5\57\1\75"+
    "\25\57\16\0\3\57\1\60\1\61\2\0\1\54\1\55"+
    "\1\54\1\56\3\0\1\54\2\0\2\57\1\0\13\57"+
    "\1\76\17\57\16\0\3\57\1\60\1\61\2\0\1\54"+
    "\1\55\1\54\1\56\3\0\1\54\2\0\2\57\1\0"+
    "\12\57\1\77\20\57\16\0\3\57\1\60\1\61\2\0"+
    "\1\54\1\55\1\54\1\56\3\0\1\54\2\0\2\57"+
    "\1\0\7\57\1\100\11\57\1\101\11\57\16\0\3\57"+
    "\1\60\1\61\2\0\1\54\1\55\1\54\1\56\3\0"+
    "\1\54\2\0\2\57\1\0\23\57\1\102\7\57\16\0"+
    "\3\57\1\60\1\61\2\0\1\54\1\55\1\54\1\56"+
    "\3\0\1\54\2\0\2\57\1\0\13\57\1\103\17\57"+
    "\16\0\3\57\1\60\1\61\53\0\1\104\76\0\1\105"+
    "\76\0\1\106\76\0\1\107\74\0\1\110\76\0\1\110"+
    "\75\0\1\111\24\0\2\44\1\0\33\44\15\0\4\44"+
    "\1\0\1\44\3\47\2\0\3\47\2\0\63\47\2\112"+
    "\2\113\1\114\1\113\2\112\1\0\1\113\1\115\62\112"+
    "\15\0\1\116\73\0\1\117\1\44\1\0\1\44\2\117"+
    "\3\44\1\117\2\44\1\117\1\44\1\117\4\44\3\117"+
    "\6\44\1\117\1\44\15\0\1\44\1\117\2\44\1\0"+
    "\1\117\14\0\1\120\1\44\1\0\2\44\1\120\30\44"+
    "\15\0\4\44\1\0\1\120\5\0\1\60\65\0\2\60"+
    "\4\0\1\54\1\60\65\0\2\60\2\0\1\54\1\55"+
    "\1\54\1\56\3\0\1\54\2\0\2\57\1\0\5\57"+
    "\1\121\25\57\16\0\3\57\1\60\1\61\2\0\1\122"+
    "\1\123\2\122\3\0\1\122\2\0\2\57\1\0\33\57"+
    "\16\0\3\57\1\60\1\61\2\0\1\54\1\55\1\54"+
    "\1\56\3\0\1\54\2\0\2\57\1\0\25\57\1\124"+
    "\5\57\16\0\3\57\1\60\1\61\2\0\1\54\1\55"+
    "\1\54\1\56\3\0\1\54\2\0\2\57\1\0\12\57"+
    "\1\125\20\57\16\0\3\57\1\60\1\61\2\0\1\54"+
    "\1\55\1\54\1\56\3\0\1\54\2\0\2\57\1\0"+
    "\10\57\1\126\22\57\16\0\3\57\1\60\1\61\2\0"+
    "\1\54\1\55\1\54\1\56\3\0\1\54\2\0\2\57"+
    "\1\0\3\57\1\127\27\57\16\0\3\57\1\60\1\61"+
    "\2\0\1\54\1\55\1\54\1\56\3\0\1\54\2\0"+
    "\2\57\1\0\10\57\1\130\22\57\16\0\3\57\1\60"+
    "\1\61\2\0\1\54\1\55\1\54\1\56\3\0\1\54"+
    "\2\0\2\57\1\0\13\57\1\131\17\57\16\0\3\57"+
    "\1\60\1\61\2\0\1\54\1\55\1\54\1\56\3\0"+
    "\1\54\2\0\2\57\1\0\5\57\1\132\25\57\16\0"+
    "\3\57\1\60\1\61\2\0\1\54\1\55\1\54\1\56"+
    "\3\0\1\54\2\0\2\57\1\0\15\57\1\133\15\57"+
    "\16\0\3\57\1\60\1\61\2\0\1\54\1\55\1\54"+
    "\1\56\3\0\1\54\2\0\2\57\1\0\3\57\1\134"+
    "\27\57\16\0\3\57\1\60\1\61\2\0\1\54\1\55"+
    "\1\54\1\56\3\0\1\54\2\0\2\57\1\0\16\57"+
    "\1\135\14\57\16\0\3\57\1\60\1\61\2\0\1\54"+
    "\1\55\1\54\1\56\3\0\1\54\2\0\2\57\1\0"+
    "\5\57\1\136\25\57\16\0\3\57\1\60\1\61\2\0"+
    "\1\54\1\55\1\54\1\56\3\0\1\54\2\0\2\57"+
    "\1\0\21\57\1\137\11\57\16\0\3\57\1\60\1\61"+
    "\2\0\1\54\1\55\1\54\1\56\3\0\1\54\2\0"+
    "\2\57\1\0\16\57\1\140\14\57\16\0\3\57\1\60"+
    "\1\61\2\0\1\54\1\55\1\54\1\56\3\0\1\54"+
    "\2\0\2\57\1\0\12\57\1\141\20\57\16\0\3\57"+
    "\1\60\1\61\2\0\1\54\1\55\1\54\1\56\3\0"+
    "\1\54\2\0\2\57\1\0\3\57\1\142\27\57\16\0"+
    "\3\57\1\60\1\61\2\0\1\54\1\55\1\54\1\56"+
    "\3\0\1\54\2\0\2\57\1\0\26\57\1\143\4\57"+
    "\16\0\3\57\1\60\1\61\3\112\1\0\1\114\3\112"+
    "\2\0\65\112\1\144\1\145\1\114\1\144\2\112\1\0"+
    "\1\146\1\115\62\112\3\114\1\145\4\114\1\0\1\146"+
    "\1\147\62\114\3\112\1\0\1\114\2\112\1\150\2\0"+
    "\63\112\16\0\1\151\72\0\1\120\1\44\1\0\2\44"+
    "\1\120\10\44\1\152\17\44\15\0\1\44\1\152\2\44"+
    "\1\0\1\120\2\0\1\153\1\154\2\153\3\0\1\153"+
    "\2\0\2\57\1\0\13\57\1\155\17\57\16\0\3\57"+
    "\1\60\1\61\4\0\1\122\1\60\65\0\2\60\2\0"+
    "\1\54\1\55\1\54\1\56\3\0\1\54\2\0\2\57"+
    "\1\0\12\57\1\156\20\57\16\0\3\57\1\60\1\61"+
    "\2\0\1\54\1\55\1\54\1\56\3\0\1\54\2\0"+
    "\2\57\1\0\12\57\1\157\20\57\16\0\3\57\1\60"+
    "\1\61\2\0\1\54\1\55\1\54\1\56\3\0\1\54"+
    "\2\0\2\57\1\0\13\57\1\160\17\57\16\0\3\57"+
    "\1\60\1\61\2\0\1\54\1\55\1\54\1\56\3\0"+
    "\1\54\2\0\2\57\1\0\15\57\1\161\15\57\16\0"+
    "\3\57\1\60\1\61\2\0\1\54\1\55\1\54\1\56"+
    "\3\0\1\54\2\0\2\57\1\0\11\57\1\162\21\57"+
    "\16\0\3\57\1\60\1\61\2\0\1\54\1\55\1\54"+
    "\1\56\3\0\1\54\2\0\2\57\1\0\21\57\1\163"+
    "\11\57\16\0\3\57\1\60\1\61\2\0\1\54\1\55"+
    "\1\54\1\56\3\0\1\54\2\0\2\57\1\0\13\57"+
    "\1\164\17\57\16\0\3\57\1\60\1\61\2\0\1\54"+
    "\1\55\1\54\1\56\3\0\1\54\2\0\2\57\1\0"+
    "\13\57\1\165\17\57\16\0\3\57\1\60\1\61\2\0"+
    "\1\54\1\55\1\54\1\56\3\0\1\54\2\0\2\57"+
    "\1\0\6\57\1\166\24\57\16\0\3\57\1\60\1\61"+
    "\2\0\1\54\1\55\1\54\1\56\3\0\1\54\2\0"+
    "\2\57\1\0\3\57\1\167\27\57\16\0\3\57\1\60"+
    "\1\61\2\0\1\54\1\55\1\54\1\56\3\0\1\54"+
    "\2\0\2\57\1\0\10\57\1\170\22\57\16\0\3\57"+
    "\1\60\1\61\2\0\1\54\1\55\1\54\1\56\3\0"+
    "\1\54\2\0\2\57\1\0\15\57\1\171\15\57\16\0"+
    "\3\57\1\60\1\61\2\0\1\172\1\173\2\172\3\0"+
    "\1\172\2\0\2\57\1\0\33\57\16\0\3\57\1\60"+
    "\1\61\2\0\1\54\1\55\1\54\1\56\3\0\1\54"+
    "\2\0\2\57\1\0\15\57\1\174\15\57\16\0\3\57"+
    "\1\60\1\61\2\0\1\54\1\55\1\54\1\56\3\0"+
    "\1\54\2\0\2\57\1\0\12\57\1\175\20\57\16\0"+
    "\3\57\1\60\1\61\2\0\1\176\1\177\2\176\3\0"+
    "\1\176\2\0\2\57\1\0\31\57\1\200\1\57\16\0"+
    "\3\57\1\60\1\61\3\112\1\0\1\114\3\112\2\0"+
    "\1\115\62\112\4\0\1\146\5\0\1\201\74\0\1\201"+
    "\62\0\3\114\1\145\3\114\1\202\1\0\1\146\1\147"+
    "\62\114\14\0\1\203\1\44\1\0\2\44\1\203\30\44"+
    "\13\0\2\204\4\44\1\0\1\203\4\0\1\153\1\60"+
    "\65\0\2\60\2\0\1\54\1\55\1\54\1\56\3\0"+
    "\1\54\2\0\2\57\1\0\16\57\1\205\14\57\16\0"+
    "\3\57\1\60\1\61\2\0\1\54\1\55\1\54\1\56"+
    "\3\0\1\54\2\0\2\57\1\0\13\57\1\206\17\57"+
    "\16\0\3\57\1\60\1\61\2\0\1\207\1\210\2\207"+
    "\3\0\1\207\2\0\2\57\1\0\33\57\16\0\3\57"+
    "\1\60\1\61\2\0\1\211\1\212\2\211\3\0\1\211"+
    "\2\0\2\57\1\0\33\57\16\0\3\57\1\60\1\61"+
    "\2\0\1\54\1\55\1\54\1\56\3\0\1\54\2\0"+
    "\2\57\1\0\12\57\1\213\20\57\16\0\3\57\1\60"+
    "\1\61\2\0\1\54\1\55\1\54\1\56\3\0\1\54"+
    "\2\0\2\57\1\0\27\57\1\214\3\57\16\0\3\57"+
    "\1\60\1\61\2\0\1\54\1\55\1\54\1\56\3\0"+
    "\1\54\2\0\2\57\1\0\4\57\1\215\26\57\16\0"+
    "\3\57\1\60\1\61\2\0\1\216\1\217\1\216\1\220"+
    "\3\0\1\216\2\0\2\57\1\0\33\57\16\0\3\57"+
    "\1\60\1\61\2\0\1\221\1\222\2\221\3\0\1\221"+
    "\2\0\2\57\1\0\33\57\16\0\3\57\1\60\1\61"+
    "\2\0\1\54\1\55\1\54\1\56\3\0\1\54\2\0"+
    "\2\57\1\0\4\57\1\223\26\57\16\0\3\57\1\60"+
    "\1\61\2\0\1\54\1\55\1\54\1\56\3\0\1\54"+
    "\2\0\2\57\1\0\16\57\1\224\14\57\16\0\3\57"+
    "\1\60\1\61\2\0\1\54\1\55\1\54\1\56\3\0"+
    "\1\54\2\0\2\57\1\0\15\57\1\225\15\57\16\0"+
    "\3\57\1\60\1\61\4\0\1\172\1\60\65\0\2\60"+
    "\2\0\1\54\1\55\1\54\1\56\3\0\1\54\2\0"+
    "\2\57\1\0\13\57\1\226\17\57\16\0\3\57\1\60"+
    "\1\61\2\0\1\54\1\55\1\54\1\56\3\0\1\54"+
    "\2\0\2\57\1\0\13\57\1\227\17\57\16\0\3\57"+
    "\1\60\1\61\4\0\1\176\1\60\65\0\2\60\2\0"+
    "\1\54\1\55\1\54\1\56\3\0\1\54\2\0\2\57"+
    "\1\0\16\57\1\230\14\57\16\0\3\57\1\60\1\61"+
    "\7\0\1\231\101\0\1\203\1\44\1\0\2\44\1\203"+
    "\30\44\15\0\4\44\1\0\1\203\14\0\1\232\4\0"+
    "\1\232\52\0\1\232\2\0\1\54\1\55\1\54\1\56"+
    "\3\0\1\54\2\0\2\57\1\0\22\57\1\233\10\57"+
    "\16\0\3\57\1\60\1\61\2\0\1\54\1\55\1\54"+
    "\1\56\3\0\1\54\2\0\2\57\1\0\24\57\1\234"+
    "\6\57\16\0\3\57\1\60\1\61\4\0\1\207\1\60"+
    "\65\0\2\60\4\0\1\211\1\60\65\0\2\60\2\0"+
    "\1\54\1\55\1\54\1\56\3\0\1\54\2\0\2\57"+
    "\1\0\13\57\1\235\17\57\16\0\3\57\1\60\1\61"+
    "\2\0\1\236\1\237\2\236\3\0\1\236\2\0\2\57"+
    "\1\0\33\57\16\0\3\57\1\60\1\61\2\0\1\54"+
    "\1\55\1\54\1\56\3\0\1\54\2\0\2\57\1\0"+
    "\6\57\1\240\24\57\16\0\3\57\1\60\1\61\5\0"+
    "\1\60\24\0\1\241\40\0\2\60\4\0\1\216\1\60"+
    "\24\0\1\241\40\0\2\60\4\0\1\221\1\60\65\0"+
    "\2\60\2\0\1\54\1\55\1\54\1\56\3\0\1\54"+
    "\2\0\2\57\1\0\17\57\1\242\13\57\16\0\3\57"+
    "\1\60\1\61\2\0\1\54\1\55\1\54\1\56\3\0"+
    "\1\54\2\0\2\57\1\0\4\57\1\243\26\57\16\0"+
    "\3\57\1\60\1\61\2\0\1\244\1\245\2\244\3\0"+
    "\1\244\2\0\2\57\1\0\33\57\16\0\3\57\1\60"+
    "\1\61\2\0\1\246\1\247\2\246\3\0\1\246\2\0"+
    "\2\57\1\0\33\57\16\0\3\57\1\60\1\61\2\0"+
    "\1\54\1\55\1\54\1\56\3\0\1\54\2\0\2\57"+
    "\1\0\16\57\1\250\14\57\16\0\3\57\1\60\1\61"+
    "\2\0\1\54\1\55\1\54\1\56\3\0\1\54\2\0"+
    "\2\57\1\0\21\57\1\251\11\57\16\0\3\57\1\60"+
    "\1\61\2\0\1\54\1\55\1\54\1\56\3\0\1\54"+
    "\2\0\2\57\1\0\13\57\1\252\17\57\16\0\3\57"+
    "\1\60\1\61\2\0\1\253\1\254\2\253\3\0\1\253"+
    "\2\0\2\57\1\0\33\57\16\0\3\57\1\60\1\61"+
    "\4\0\1\236\1\60\65\0\2\60\2\0\1\54\1\55"+
    "\1\54\1\56\3\0\1\54\2\0\2\57\1\0\15\57"+
    "\1\255\15\57\16\0\3\57\1\60\1\61\31\0\1\256"+
    "\45\0\1\257\1\260\2\257\3\0\1\257\2\0\2\57"+
    "\1\0\33\57\16\0\3\57\1\60\1\61\2\0\1\261"+
    "\1\262\1\261\1\263\3\0\1\261\2\0\2\57\1\0"+
    "\33\57\16\0\3\57\1\60\1\61\4\0\1\244\1\60"+
    "\65\0\2\60\4\0\1\246\1\60\65\0\2\60\2\0"+
    "\1\54\1\55\1\54\1\56\3\0\1\54\2\0\2\57"+
    "\1\0\21\57\1\264\11\57\16\0\3\57\1\60\1\61"+
    "\2\0\1\54\1\55\1\54\1\56\3\0\1\54\2\0"+
    "\2\57\1\0\20\57\1\265\12\57\16\0\3\57\1\60"+
    "\1\61\2\0\1\54\1\55\1\54\1\56\3\0\1\54"+
    "\2\0\2\57\1\0\4\57\1\266\26\57\16\0\3\57"+
    "\1\60\1\61\4\0\1\253\1\60\65\0\2\60\2\0"+
    "\1\267\1\270\2\267\3\0\1\267\2\0\2\57\1\0"+
    "\33\57\16\0\3\57\1\60\1\61\34\0\1\271\44\0"+
    "\1\257\1\60\65\0\2\60\5\0\1\60\27\0\1\272"+
    "\35\0\2\60\4\0\1\261\1\60\27\0\1\272\35\0"+
    "\2\60\2\0\1\54\1\55\1\54\1\56\3\0\1\54"+
    "\2\0\2\57\1\0\32\57\1\273\16\0\3\57\1\60"+
    "\1\61\2\0\1\54\1\55\1\54\1\56\3\0\1\54"+
    "\2\0\2\57\1\0\13\57\1\274\17\57\16\0\3\57"+
    "\1\60\1\61\2\0\1\54\1\55\1\54\1\56\3\0"+
    "\1\54\2\0\2\57\1\0\5\57\1\275\25\57\16\0"+
    "\3\57\1\60\1\61\4\0\1\267\1\60\65\0\2\60"+
    "\32\0\1\276\74\0\1\277\44\0\1\300\1\301\1\300"+
    "\1\302\3\0\1\300\2\0\2\57\1\0\33\57\16\0"+
    "\3\57\1\60\1\61\2\0\1\303\1\304\2\303\3\0"+
    "\1\303\2\0\2\57\1\0\33\57\16\0\3\57\1\60"+
    "\1\61\2\0\1\54\1\55\1\54\1\56\3\0\1\54"+
    "\2\0\2\57\1\0\15\57\1\305\15\57\16\0\3\57"+
    "\1\60\1\61\24\0\1\306\55\0\1\60\41\0\1\307"+
    "\23\0\2\60\4\0\1\300\1\60\41\0\1\307\23\0"+
    "\2\60\4\0\1\303\1\60\65\0\2\60\2\0\1\310"+
    "\1\311\2\310\3\0\1\310\2\0\2\57\1\0\33\57"+
    "\16\0\3\57\1\60\1\61\27\0\1\312\77\0\1\313"+
    "\46\0\1\310\1\60\65\0\2\60\35\0\1\314\104\0"+
    "\1\315\52\0\1\316\121\0\1\317\61\0\1\320\74\0"+
    "\1\321\77\0\1\322\105\0\1\323\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10004];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\3\1\1\11\30\1\2\11\2\1\1\0"+
    "\2\1\2\0\2\1\2\0\1\1\1\0\1\11\1\1"+
    "\1\0\1\1\20\0\6\11\5\0\5\1\14\0\1\1"+
    "\2\0\1\1\4\0\1\1\1\11\3\1\2\0\3\1"+
    "\4\0\1\1\3\0\2\1\2\0\2\1\2\0\2\1"+
    "\3\0\4\1\1\0\1\1\3\0\3\1\2\0\3\1"+
    "\1\0\1\11\1\1\2\0\3\1\2\0\1\1\1\0"+
    "\4\1\3\0\3\1\1\0\2\1\2\0\1\1\3\0"+
    "\2\1\3\0\1\1\1\0\1\11\3\0\4\1\2\0"+
    "\2\1\4\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    String token = "";
    int fixed = 0;
    String whites = "";

    private String longIdentifier(String text){
        if(text.length() > 31){
            return text.substring(0, 31);
        }else{
            return text;
        }
    }

    private String blankSpaces(int length){
        // allow 32 to be the max white space between token and the next word
        StringBuilder builder = new StringBuilder();
        for(int i = 0; i < 32 - length; i++){
            builder.append(" ");
        }
        return builder.toString();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return "*** Error en linea " + yyline + " caracter no reconocido " + yytext();
            }
          case 41: break;
          case 2: 
            { token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'" + token + "'";
            }
          case 42: break;
          case 3: 
            { // accion vacia: se ignoran los espacios y tabuladores
            }
          case 43: break;
          case 4: 
            { whites = blankSpaces(1);
     return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'*'";
            }
          case 44: break;
          case 5: 
            { token = yytext();
    fixed = token.length() - 1;
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed +  " is intConstant  " + "(value = " + token + ")";
            }
          case 45: break;
          case 6: 
            { whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'+'";
            }
          case 46: break;
          case 7: 
            { whites = blankSpaces(1);
     return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'-'";
            }
          case 47: break;
          case 8: 
            { return "*** Error en linea " + yyline + " identificador inválido: " + yytext();
            }
          case 48: break;
          case 9: 
            { token = yytext();
    fixed = yycolumn + token.length() - 2;
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is string variable";
            }
          case 49: break;
          case 10: 
            { // ignore single line comments
            }
          case 50: break;
          case 11: 
            { token = longIdentifier(yytext());
    fixed = yycolumn + token.length() - 2;
    whites = blankSpaces(token.length());
    return token + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is identifier";
            }
          case 51: break;
          case 12: 
            { fixed = yycolumn + 1;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is if";
            }
          case 52: break;
          case 13: 
            { fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'[]'";
            }
          case 53: break;
          case 14: 
            { fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'{}'";
            }
          case 54: break;
          case 15: 
            { fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'()'";
            }
          case 55: break;
          case 16: 
            { token = yytext();
    fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed +  " is " + "'" + token + "'";
            }
          case 56: break;
          case 17: 
            { token = yytext();
    fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'" + token + "'";
            }
          case 57: break;
          case 18: 
            { fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'||'";
            }
          case 58: break;
          case 19: 
            { token = yytext();
    fixed = token.length() - 1;
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is hexadecimal";
            }
          case 59: break;
          case 20: 
            { token = yytext();
    fixed = yycolumn + token.length() - 1;
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is float (value = " + token + ")";
            }
          case 60: break;
          case 21: 
            { fixed = yycolumn + 2;
    whites = blankSpaces(yytext().length() - 1);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is int";
            }
          case 61: break;
          case 22: 
            { fixed = yycolumn + 2;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is for";
            }
          case 62: break;
          case 23: 
            { fixed = yycolumn + 2;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is New";
            }
          case 63: break;
          case 24: 
            { // ignore multiline comments
            }
          case 64: break;
          case 25: 
            { fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is null";
            }
          case 65: break;
          case 26: 
            { fixed = yycolumn + 3;
    whites = blankSpaces(4);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is boolConstant (value = true)";
            }
          case 66: break;
          case 27: 
            { fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is this";
            }
          case 67: break;
          case 28: 
            { fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is void";
            }
          case 68: break;
          case 29: 
            { fixed = yycolumn + 4;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is break";
            }
          case 69: break;
          case 30: 
            { fixed = yycolumn + 4;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is class";
            }
          case 70: break;
          case 31: 
            { fixed = yycolumn + 4;
     whites = blankSpaces(5);
     return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is boolConstant (value = false)";
            }
          case 71: break;
          case 32: 
            { fixed = yycolumn + 4;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is while";
            }
          case 72: break;
          case 33: 
            { fixed = yycolumn + 5;
    whites = blankSpaces(yytext().length() - 1);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is double";
            }
          case 73: break;
          case 34: 
            { fixed = yycolumn + 5;
    whites = blankSpaces(yytext().length() - 1);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is string";
            }
          case 74: break;
          case 35: 
            { fixed = yycolumn + 6;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is extends";
            }
          case 75: break;
          case 36: 
            { fixed = yycolumn + 8;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is interface";
            }
          case 76: break;
          case 37: 
            { fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is else";
            }
          case 77: break;
          case 38: 
            { fixed = yycolumn + 9;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is implements";
            }
          case 78: break;
          case 39: 
            { fixed = yycolumn + 5;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is return";
            }
          case 79: break;
          case 40: 
            { fixed = yycolumn + 7;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is NewArray";
            }
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
