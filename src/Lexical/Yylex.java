/* The following code was generated by JFlex 1.6.1 */

package Lexical;

import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Lexical/lexer.flex</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\7\1\10\1\3\22\0\1\2\1\54\1\5"+
    "\2\0\1\1\1\55\1\0\1\50\1\51\1\11\1\57\1\70\1\60"+
    "\1\64\1\6\1\61\11\12\1\0\1\71\1\52\1\53\1\54\2\0"+
    "\1\42\3\63\1\65\1\63\7\66\1\41\11\66\1\62\2\66\1\44"+
    "\1\0\1\45\1\0\1\67\1\0\1\31\1\21\1\30\1\16\1\23"+
    "\1\32\1\27\1\33\1\13\1\66\1\40\1\22\1\35\1\14\1\17"+
    "\1\36\1\66\1\26\1\25\1\15\1\20\1\24\1\37\1\34\1\43"+
    "\1\66\1\46\1\56\1\47\7\0\1\7\u1fa2\0\1\7\1\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\1\1\4\1\5\1\6"+
    "\16\7\5\2\2\1\1\10\1\11\1\6\1\12\1\13"+
    "\1\0\1\14\1\15\1\14\1\16\2\0\3\7\1\17"+
    "\20\7\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\3\0\2\27\1\30\1\31\2\17\14\7\1\32\2\7"+
    "\1\33\3\0\2\27\1\34\1\0\2\31\2\7\1\35"+
    "\1\36\1\37\4\7\1\40\3\7\2\32\2\7\2\33"+
    "\1\7\2\27\1\34\1\30\1\0\2\7\2\35\2\37"+
    "\1\7\1\41\3\7\2\40\2\7\1\42\1\43\1\44"+
    "\1\7\1\34\2\7\1\45\2\41\1\0\1\7\1\46"+
    "\1\7\2\42\2\44\3\7\2\45\1\0\1\47\2\46"+
    "\5\7\1\0\2\47\1\0\1\7\1\50\1\7\1\51"+
    "\1\0\2\7\2\50\1\52\2\0\2\52\4\0\1\53"+
    "\4\0\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\72\0\164\0\256\0\350\0\u0122\0\72"+
    "\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\72\0\72"+
    "\0\u0658\0\u0692\0\u06cc\0\350\0\72\0\350\0\350\0\u0706"+
    "\0\u0740\0\u077a\0\72\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c"+
    "\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c"+
    "\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0"+
    "\0\u0c3c\0\u0cea\0\u0d24\0\u0d5e\0\72\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc"+
    "\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\u11e6\0\u0cb0\0\u1220\0\u0c3c\0\u125a\0\72\0\u1294\0\u12ce"+
    "\0\u1308\0\u1342\0\u027e\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464"+
    "\0\u149e\0\u14d8\0\u1512\0\u154c\0\72\0\u1586\0\u15c0\0\u15fa"+
    "\0\72\0\u1634\0\u166e\0\72\0\u16a8\0\u0cb0\0\u16e2\0\u16e2"+
    "\0\u171c\0\u1756\0\72\0\u1790\0\72\0\u17ca\0\u1804\0\u183e"+
    "\0\u1878\0\u18b2\0\u18ec\0\72\0\u1926\0\u1960\0\u199a\0\u19d4"+
    "\0\u027e\0\u1a0e\0\u1a48\0\72\0\u1a82\0\u1abc\0\u1af6\0\72"+
    "\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\72\0\u1c52\0\72"+
    "\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\72\0\u1d74\0\u1dae\0\u1de8"+
    "\0\72\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e"+
    "\0\72\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\72\0\u20da"+
    "\0\u2114\0\u214e\0\72\0\u2188\0\u21c2\0\u21fc\0\u2236\0\72"+
    "\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\72\0\u2392\0\u23cc"+
    "\0\u2406\0\u2440\0\72";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\0"+
    "\1\4\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\16\1\20\1\21\1\22\1\23\1\16\1\24"+
    "\1\16\1\25\4\16\1\26\1\16\1\27\2\16\1\30"+
    "\1\3\1\31\1\3\1\32\1\3\1\33\1\3\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\2\16\1\3\2\16"+
    "\1\42\1\43\1\3\162\0\1\43\5\0\1\4\63\0"+
    "\1\43\1\0\3\44\1\0\1\45\1\46\1\44\2\0"+
    "\60\44\1\47\6\0\1\50\2\0\1\51\72\0\1\11"+
    "\31\42\15\0\1\11\2\42\1\52\3\42\4\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\2\16\1\55\15\16"+
    "\1\56\2\16\1\57\6\16\15\0\3\16\1\0\3\16"+
    "\4\0\1\53\1\54\1\53\3\0\1\53\1\0\6\16"+
    "\1\60\23\16\15\0\3\16\1\0\3\16\4\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\14\16\1\61\4\16"+
    "\1\62\10\16\15\0\3\16\1\0\3\16\4\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\5\16\1\63\24\16"+
    "\15\0\3\16\1\0\3\16\4\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\32\16\15\0\3\16\1\0\3\16"+
    "\4\0\1\53\1\54\1\53\3\0\1\53\1\0\14\16"+
    "\1\64\15\16\15\0\3\16\1\0\3\16\4\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\10\16\1\65\11\16"+
    "\1\66\7\16\15\0\3\16\1\0\3\16\4\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\5\16\1\67\24\16"+
    "\15\0\3\16\1\0\3\16\4\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\3\16\1\70\26\16\15\0\3\16"+
    "\1\0\3\16\4\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\11\16\1\71\20\16\15\0\3\16\1\0\3\16"+
    "\4\0\1\53\1\54\1\53\3\0\1\53\1\0\10\16"+
    "\1\72\21\16\15\0\3\16\1\0\3\16\4\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\5\16\1\73\11\16"+
    "\1\74\12\16\15\0\3\16\1\0\3\16\4\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\21\16\1\75\10\16"+
    "\15\0\3\16\1\0\3\16\4\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\11\16\1\76\20\16\15\0\3\16"+
    "\1\0\3\16\47\0\1\77\73\0\1\100\73\0\1\101"+
    "\73\0\1\102\71\0\1\103\73\0\1\103\72\0\1\104"+
    "\25\0\1\11\21\42\1\105\7\42\15\0\1\11\1\105"+
    "\1\42\1\52\3\42\14\0\32\42\15\0\3\42\1\0"+
    "\3\42\4\0\3\43\3\0\1\43\61\0\3\50\2\0"+
    "\2\50\2\0\61\50\2\106\2\107\1\110\1\106\1\111"+
    "\1\0\1\107\1\112\60\106\12\0\1\113\46\0\1\113"+
    "\14\0\1\53\67\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\3\16\1\114\26\16\15\0\3\16\1\0\3\16"+
    "\4\0\1\115\1\116\1\115\3\0\1\115\1\0\32\16"+
    "\15\0\3\16\1\0\3\16\4\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\24\16\1\117\5\16\15\0\3\16"+
    "\1\0\3\16\4\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\10\16\1\120\21\16\15\0\3\16\1\0\3\16"+
    "\4\0\1\53\1\54\1\53\3\0\1\53\1\0\6\16"+
    "\1\121\23\16\15\0\3\16\1\0\3\16\4\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\1\16\1\122\30\16"+
    "\15\0\3\16\1\0\3\16\4\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\6\16\1\123\23\16\15\0\3\16"+
    "\1\0\3\16\4\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\11\16\1\124\20\16\15\0\3\16\1\0\3\16"+
    "\4\0\1\53\1\54\1\53\3\0\1\53\1\0\13\16"+
    "\1\125\16\16\15\0\3\16\1\0\3\16\4\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\3\16\1\126\26\16"+
    "\15\0\3\16\1\0\3\16\4\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\1\16\1\127\30\16\15\0\3\16"+
    "\1\0\3\16\4\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\14\16\1\130\15\16\15\0\3\16\1\0\3\16"+
    "\4\0\1\53\1\54\1\53\3\0\1\53\1\0\3\16"+
    "\1\131\26\16\15\0\3\16\1\0\3\16\4\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\17\16\1\132\12\16"+
    "\15\0\3\16\1\0\3\16\4\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\14\16\1\133\15\16\15\0\3\16"+
    "\1\0\3\16\4\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\10\16\1\134\21\16\15\0\3\16\1\0\3\16"+
    "\4\0\1\53\1\54\1\53\3\0\1\53\1\0\1\16"+
    "\1\135\30\16\15\0\3\16\1\0\3\16\4\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\25\16\1\136\4\16"+
    "\15\0\3\16\1\0\3\16\14\0\1\105\3\42\1\105"+
    "\2\42\1\105\1\42\1\105\4\42\3\105\7\42\1\105"+
    "\1\42\15\0\1\105\1\42\1\105\1\0\1\105\2\42"+
    "\2\0\3\106\1\0\1\110\2\106\2\0\63\106\1\137"+
    "\1\140\1\110\1\106\1\111\1\0\1\141\1\112\60\106"+
    "\3\110\1\140\2\110\1\142\1\0\1\141\1\143\60\110"+
    "\3\106\1\0\1\110\1\106\1\144\2\0\61\106\12\0"+
    "\1\113\10\0\1\145\35\0\1\113\3\0\1\145\6\0"+
    "\1\146\1\147\1\146\3\0\1\146\1\0\11\16\1\150"+
    "\20\16\15\0\3\16\1\0\3\16\6\0\1\115\67\0"+
    "\1\53\1\54\1\53\3\0\1\53\1\0\10\16\1\151"+
    "\21\16\15\0\3\16\1\0\3\16\4\0\1\53\1\54"+
    "\1\53\3\0\1\53\1\0\10\16\1\152\21\16\15\0"+
    "\3\16\1\0\3\16\4\0\1\53\1\54\1\53\3\0"+
    "\1\53\1\0\11\16\1\153\20\16\15\0\3\16\1\0"+
    "\3\16\4\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\13\16\1\154\16\16\15\0\3\16\1\0\3\16\4\0"+
    "\1\53\1\54\1\53\3\0\1\53\1\0\7\16\1\155"+
    "\22\16\15\0\3\16\1\0\3\16\4\0\1\53\1\54"+
    "\1\53\3\0\1\53\1\0\17\16\1\156\12\16\15\0"+
    "\3\16\1\0\3\16\4\0\1\53\1\54\1\53\3\0"+
    "\1\53\1\0\11\16\1\157\20\16\15\0\3\16\1\0"+
    "\3\16\4\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\11\16\1\160\20\16\15\0\3\16\1\0\3\16\4\0"+
    "\1\53\1\54\1\53\3\0\1\53\1\0\4\16\1\161"+
    "\25\16\15\0\3\16\1\0\3\16\4\0\1\53\1\54"+
    "\1\53\3\0\1\53\1\0\1\16\1\162\30\16\15\0"+
    "\3\16\1\0\3\16\4\0\1\53\1\54\1\53\3\0"+
    "\1\53\1\0\6\16\1\163\23\16\15\0\3\16\1\0"+
    "\3\16\4\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\13\16\1\164\16\16\15\0\3\16\1\0\3\16\4\0"+
    "\1\165\1\166\1\165\3\0\1\165\1\0\32\16\15\0"+
    "\3\16\1\0\3\16\4\0\1\53\1\54\1\53\3\0"+
    "\1\53\1\0\13\16\1\167\16\16\15\0\3\16\1\0"+
    "\3\16\4\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\10\16\1\170\21\16\15\0\3\16\1\0\3\16\4\0"+
    "\1\171\1\172\1\171\3\0\1\171\1\0\30\16\1\173"+
    "\1\16\15\0\3\16\1\0\3\16\2\0\3\106\1\0"+
    "\1\110\1\106\1\111\2\0\1\112\60\106\4\0\1\141"+
    "\1\0\1\174\2\0\1\175\66\0\1\174\2\0\1\175"+
    "\60\0\3\110\1\140\2\110\1\176\1\0\1\141\1\143"+
    "\60\110\12\0\1\177\44\0\2\200\1\177\14\0\1\146"+
    "\67\0\1\53\1\54\1\53\3\0\1\53\1\0\14\16"+
    "\1\201\15\16\15\0\3\16\1\0\3\16\4\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\11\16\1\202\20\16"+
    "\15\0\3\16\1\0\3\16\4\0\1\203\1\204\1\203"+
    "\3\0\1\203\1\0\32\16\15\0\3\16\1\0\3\16"+
    "\4\0\1\205\1\206\1\205\3\0\1\205\1\0\32\16"+
    "\15\0\3\16\1\0\3\16\4\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\10\16\1\207\21\16\15\0\3\16"+
    "\1\0\3\16\4\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\26\16\1\210\3\16\15\0\3\16\1\0\3\16"+
    "\4\0\1\211\1\212\1\211\3\0\1\211\1\0\32\16"+
    "\15\0\3\16\1\0\3\16\4\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\2\16\1\213\27\16\15\0\3\16"+
    "\1\0\3\16\4\0\1\214\1\215\1\214\3\0\1\214"+
    "\1\0\32\16\15\0\3\16\1\0\3\16\4\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\2\16\1\216\27\16"+
    "\15\0\3\16\1\0\3\16\4\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\14\16\1\217\15\16\15\0\3\16"+
    "\1\0\3\16\4\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\13\16\1\220\16\16\15\0\3\16\1\0\3\16"+
    "\6\0\1\165\67\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\11\16\1\221\20\16\15\0\3\16\1\0\3\16"+
    "\4\0\1\53\1\54\1\53\3\0\1\53\1\0\11\16"+
    "\1\222\20\16\15\0\3\16\1\0\3\16\6\0\1\171"+
    "\67\0\1\53\1\54\1\53\3\0\1\53\1\0\14\16"+
    "\1\223\15\16\15\0\3\16\1\0\3\16\10\0\1\224"+
    "\75\0\1\177\46\0\1\177\12\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\20\16\1\225\11\16\15\0\3\16"+
    "\1\0\3\16\4\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\23\16\1\226\6\16\15\0\3\16\1\0\3\16"+
    "\6\0\1\203\71\0\1\205\67\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\11\16\1\227\20\16\15\0\3\16"+
    "\1\0\3\16\4\0\1\230\1\231\1\230\3\0\1\230"+
    "\1\0\32\16\15\0\3\16\1\0\3\16\25\0\1\232"+
    "\52\0\1\211\16\0\1\232\50\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\4\16\1\233\25\16\15\0\3\16"+
    "\1\0\3\16\6\0\1\214\67\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\15\16\1\234\14\16\15\0\3\16"+
    "\1\0\3\16\4\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\2\16\1\235\27\16\15\0\3\16\1\0\3\16"+
    "\4\0\1\236\1\237\1\236\3\0\1\236\1\0\32\16"+
    "\15\0\3\16\1\0\3\16\4\0\1\240\1\241\1\240"+
    "\3\0\1\240\1\0\32\16\15\0\3\16\1\0\3\16"+
    "\4\0\1\53\1\54\1\53\3\0\1\53\1\0\14\16"+
    "\1\242\15\16\15\0\3\16\1\0\3\16\4\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\17\16\1\243\12\16"+
    "\15\0\3\16\1\0\3\16\4\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\11\16\1\244\20\16\15\0\3\16"+
    "\1\0\3\16\4\0\1\245\1\246\1\245\3\0\1\245"+
    "\1\0\32\16\15\0\3\16\1\0\3\16\6\0\1\230"+
    "\107\0\1\247\51\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\13\16\1\250\16\16\15\0\3\16\1\0\3\16"+
    "\4\0\1\251\1\252\1\251\3\0\1\251\1\0\32\16"+
    "\15\0\3\16\1\0\3\16\4\0\1\253\1\254\1\253"+
    "\3\0\1\253\1\0\32\16\15\0\3\16\1\0\3\16"+
    "\6\0\1\236\71\0\1\240\67\0\1\53\1\54\1\53"+
    "\3\0\1\53\1\0\17\16\1\255\12\16\15\0\3\16"+
    "\1\0\3\16\4\0\1\53\1\54\1\53\3\0\1\53"+
    "\1\0\16\16\1\256\13\16\15\0\3\16\1\0\3\16"+
    "\4\0\1\53\1\54\1\53\3\0\1\53\1\0\2\16"+
    "\1\257\27\16\15\0\3\16\1\0\3\16\6\0\1\245"+
    "\112\0\1\260\46\0\1\261\1\262\1\261\3\0\1\261"+
    "\1\0\32\16\15\0\3\16\1\0\3\16\6\0\1\251"+
    "\113\0\1\263\47\0\1\253\21\0\1\263\45\0\1\53"+
    "\1\54\1\53\3\0\1\53\1\0\31\16\1\264\15\0"+
    "\3\16\1\0\3\16\4\0\1\53\1\54\1\53\3\0"+
    "\1\53\1\0\11\16\1\265\20\16\15\0\3\16\1\0"+
    "\3\16\4\0\1\53\1\54\1\53\3\0\1\53\1\0"+
    "\3\16\1\266\26\16\15\0\3\16\1\0\3\16\25\0"+
    "\1\267\52\0\1\261\110\0\1\270\50\0\1\271\1\272"+
    "\1\271\3\0\1\271\1\0\32\16\15\0\3\16\1\0"+
    "\3\16\4\0\1\273\1\274\1\273\3\0\1\273\1\0"+
    "\32\16\15\0\3\16\1\0\3\16\4\0\1\53\1\54"+
    "\1\53\3\0\1\53\1\0\13\16\1\275\16\16\15\0"+
    "\3\16\1\0\3\16\17\0\1\276\115\0\1\277\34\0"+
    "\1\271\34\0\1\277\34\0\1\273\67\0\1\300\1\301"+
    "\1\300\3\0\1\300\1\0\32\16\15\0\3\16\1\0"+
    "\3\16\22\0\1\302\74\0\1\303\52\0\1\300\113\0"+
    "\1\304\102\0\1\305\46\0\1\306\117\0\1\307\55\0"+
    "\1\310\71\0\1\311\74\0\1\312\103\0\1\313\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9338];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\26\1\2\11\3\1\1\0"+
    "\1\11\3\1\2\0\1\11\23\1\6\11\1\1\3\0"+
    "\4\1\1\11\21\1\3\0\3\1\1\0\1\11\16\1"+
    "\1\11\3\1\1\11\2\1\1\11\3\1\1\0\2\1"+
    "\1\11\1\1\1\11\6\1\1\11\7\1\1\11\3\1"+
    "\1\11\1\1\1\0\3\1\1\11\1\1\1\11\4\1"+
    "\1\11\1\1\1\0\1\1\1\11\6\1\1\0\1\11"+
    "\1\1\1\0\3\1\1\11\1\0\2\1\1\11\2\1"+
    "\2\0\1\11\1\1\4\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    String token = "";
    int fixed = 0;
    String whites = "";

    private String longIdentifier(String text){
        if(text.length() > 31){
            return text.substring(0, 31);
        }else{
            return text;
        }
    }

    private String blankSpaces(int length){
        // allow 32 to be the max white space between token and the next word
        StringBuilder builder = new StringBuilder();
        for(int i = 0; i < 32 - length; i++){
            builder.append(" ");
        }
        return builder.toString();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return "*** Error en linea " + yyline + " caracter no reconocido " + yytext();
            }
          case 45: break;
          case 2: 
            { token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + "'" + token + "'";
            }
          case 46: break;
          case 3: 
            { // accion vacia: se ignoran los espacios y tabuladores
            }
          case 47: break;
          case 4: 
            { token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'" + token + "'";
            }
          case 48: break;
          case 5: 
            { whites = blankSpaces(1);
     return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'*'";
            }
          case 49: break;
          case 6: 
            { token = yytext();
    fixed = token.length() - 1;
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed +  " is intConstant  " + "(value = " + token + ")";
            }
          case 50: break;
          case 7: 
            { token = longIdentifier(yytext());
    fixed = yycolumn + token.length() - 2;
    whites = blankSpaces(token.length());
    return token + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is identifier";
            }
          case 51: break;
          case 8: 
            { whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'+'";
            }
          case 52: break;
          case 9: 
            { whites = blankSpaces(1);
     return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'-'";
            }
          case 53: break;
          case 10: 
            { return "*** Error en linea " + yyline + " identificador inválido: " + yytext();
            }
          case 54: break;
          case 11: 
            { token = yytext();
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + ".";
            }
          case 55: break;
          case 12: 
            { return "*** Error en linea " + yyline + " variable String sin cerrar " + yytext();
            }
          case 56: break;
          case 13: 
            { token = yytext();
    fixed = yycolumn + token.length() - 2;
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is string variable";
            }
          case 57: break;
          case 14: 
            { // ignore single line comments
            }
          case 58: break;
          case 15: 
            { fixed = yycolumn + 1;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is if";
            }
          case 59: break;
          case 16: 
            { fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'[]'";
            }
          case 60: break;
          case 17: 
            { fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'{}'";
            }
          case 61: break;
          case 18: 
            { fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'()'";
            }
          case 62: break;
          case 19: 
            { token = yytext();
    fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed +  " is " + "'" + token + "'";
            }
          case 63: break;
          case 20: 
            { token = yytext();
    fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'" + token + "'";
            }
          case 64: break;
          case 21: 
            { fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'||'";
            }
          case 65: break;
          case 22: 
            { token = yytext();
     fixed = token.length() - 1;
     whites = blankSpaces(token.length());
     return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is hexadecimal " + "(value = " + token + ")";
            }
          case 66: break;
          case 23: 
            { return "*** Error en linea " + yyline + " comentario multilinea sin cerrar";
            }
          case 67: break;
          case 24: 
            { token = yytext();
    fixed = yycolumn + token.length() - 1;
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is float (value = " + token + ")";
            }
          case 68: break;
          case 25: 
            { fixed = yycolumn + 2;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is int";
            }
          case 69: break;
          case 26: 
            { fixed = yycolumn + 2;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is for";
            }
          case 70: break;
          case 27: 
            { fixed = yycolumn + 2;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is New";
            }
          case 71: break;
          case 28: 
            { // ignore multiline comments
            }
          case 72: break;
          case 29: 
            { fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is null";
            }
          case 73: break;
          case 30: 
            { fixed = yycolumn + 3;
    whites = blankSpaces(4);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is boolConstant (value = true)";
            }
          case 74: break;
          case 31: 
            { fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is this";
            }
          case 75: break;
          case 32: 
            { fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is void";
            }
          case 76: break;
          case 33: 
            { fixed = yycolumn + 4;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is break";
            }
          case 77: break;
          case 34: 
            { fixed = yycolumn + 4;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is class";
            }
          case 78: break;
          case 35: 
            { fixed = yycolumn + 4;
     whites = blankSpaces(5);
     return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is boolConstant (value = false)";
            }
          case 79: break;
          case 36: 
            { fixed = yycolumn + 4;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is while";
            }
          case 80: break;
          case 37: 
            { fixed = yycolumn + 5;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is double";
            }
          case 81: break;
          case 38: 
            { fixed = yycolumn + 5;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is string";
            }
          case 82: break;
          case 39: 
            { fixed = yycolumn + 6;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is extends";
            }
          case 83: break;
          case 40: 
            { fixed = yycolumn + 8;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is interface";
            }
          case 84: break;
          case 41: 
            { fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is else";
            }
          case 85: break;
          case 42: 
            { fixed = yycolumn + 9;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is implements";
            }
          case 86: break;
          case 43: 
            { fixed = yycolumn + 5;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is return";
            }
          case 87: break;
          case 44: 
            { fixed = yycolumn + 7;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is NewArray";
            }
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
