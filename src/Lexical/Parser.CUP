package Lexical;

import java_cup.runtime.*;
import java.io.FileInputStream;
import jave.io.InputStream;

parser code {:

    public void syntax_error(Symbol s){
        report_error("Error de sintaxis en la linea " + s.left, null);
    }

    public void unrecovered_syntax_error(Symbol s) throws
        java.lang.Exception {
            report_fatal_error("", null);
    }

    public node root = null;

    public static parser getParser(String pPath) throws exception {
        InputStream is = null;
        is = new FileInputStream(pPath);
        return new parser(new Yylez(is));
    }

    public Node getTree() throws exception {
        if(root == null) {
            this.parse();
        }
        return root;
    }
    
:};

/* Terminal tokens returned by the scanner */

terminal INT, DOUBLE, VOID, BOOL, STRING, CLASS, INTERFACE, NULL, THIS, EXTENDS;
terminal IMPLEMENTS, FOR, WHILE, IF, ELSE, RETURN, BREAK, NEW, NEWARRAY;
terminal PRINT, READINTEGER, READLINE, MALLOC, TWOBRACK, TWOCURLY, TWOPAR, PERCENT;
terminal LESST, GREATT, EQUALS, EXCLA, PAC, LEFTBRACKET, RIGHTBRACKET, LEFTPAR, RIGHTPAR;
terminal LEFTCURLY, RIGHTCURLY, LESSEQ, GTREQ, DIFFERENT, DIV, AND, OR, ADD, MINUS;
terminal MULT, TRUE, FALSE, DOT, COMMA, ERROR;

/* Terminals that have values */
terminal Integer INTCONST;
terminal Double DOUBLECONST;
terminal String IDENTIFIER;
terminal String STRINGCONST;

/* Non Terminals*/
non terminal Node


























