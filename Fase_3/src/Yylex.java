/* The following code was generated by JFlex 1.6.1 */

import java.io.*;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Lexer.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner{

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\7\1\10\1\2\22\0\1\1\1\65\1\4"+
    "\2\0\1\61\1\67\1\0\1\57\1\60\1\6\1\71\1\102\1\72"+
    "\1\76\1\5\1\73\11\11\1\0\1\66\1\62\1\64\1\63\2\0"+
    "\1\41\1\44\2\75\1\77\1\75\1\43\1\100\1\50\2\100\1\51"+
    "\1\52\1\40\1\100\1\46\1\100\1\47\1\45\4\100\1\74\2\100"+
    "\1\53\1\103\1\54\1\0\1\101\1\0\1\30\1\20\1\27\1\15"+
    "\1\22\1\31\1\26\1\32\1\12\1\100\1\37\1\21\1\34\1\13"+
    "\1\16\1\35\1\100\1\25\1\24\1\14\1\17\1\23\1\36\1\33"+
    "\1\42\1\100\1\55\1\70\1\56\7\0\1\7\u1fa2\0\1\7\1\7"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\23\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\2\1\1\23\1\24\1\5"+
    "\1\25\1\26\1\27\2\0\1\30\1\0\1\31\1\32"+
    "\1\33\3\6\1\34\27\6\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\2\0\1\33"+
    "\1\47\2\34\16\6\1\50\2\6\1\51\5\6\1\52"+
    "\1\0\2\47\2\6\1\53\1\54\1\55\1\6\1\56"+
    "\3\6\1\57\4\6\2\50\2\6\2\51\6\6\1\60"+
    "\1\0\2\6\2\53\2\55\1\6\2\56\1\61\3\6"+
    "\2\57\2\6\1\62\1\63\1\64\1\65\3\6\1\66"+
    "\5\6\1\67\2\61\1\0\1\6\1\70\1\6\2\62"+
    "\2\63\2\65\3\6\2\66\2\6\1\71\2\6\2\67"+
    "\1\0\1\72\2\70\3\6\1\73\1\74\2\6\2\71"+
    "\2\6\1\0\2\72\1\0\1\75\2\73\2\74\1\6"+
    "\1\76\1\77\1\6\1\100\1\0\2\75\1\6\2\76"+
    "\2\77\1\101\1\0\1\6\2\101\1\0\1\102\1\0"+
    "\2\102\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\104\0\u0198"+
    "\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8"+
    "\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8"+
    "\0\u061c\0\u0660\0\u06a4\0\u06e8\0\104\0\u072c\0\104\0\u0770"+
    "\0\104\0\104\0\u07b4\0\u07f8\0\u083c\0\u0880\0\104\0\u08c4"+
    "\0\u0908\0\104\0\104\0\u094c\0\104\0\u0990\0\u09d4\0\210"+
    "\0\u0110\0\104\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\104\0\u0b28"+
    "\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48"+
    "\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68"+
    "\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188"+
    "\0\u11cc\0\104\0\104\0\104\0\104\0\104\0\104\0\104"+
    "\0\104\0\104\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\104"+
    "\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540"+
    "\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760"+
    "\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980"+
    "\0\104\0\u19c4\0\104\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u02ec"+
    "\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4"+
    "\0\u1d38\0\u1d7c\0\u1dc0\0\104\0\u1e04\0\u1e48\0\u1e8c\0\104"+
    "\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac"+
    "\0\u20ac\0\u20f0\0\u2134\0\104\0\u2178\0\104\0\u21bc\0\u2200"+
    "\0\104\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\104\0\u2398"+
    "\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u02ec\0\u24ec\0\u2530\0\u2574"+
    "\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794"+
    "\0\104\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\104\0\u292c"+
    "\0\104\0\u2970\0\104\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\104"+
    "\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\104\0\u2c5c"+
    "\0\u2ca0\0\u2ce4\0\104\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38"+
    "\0\u2e7c\0\u2ec0\0\u2f04\0\104\0\u2f48\0\u2f8c\0\u2fd0\0\u3014"+
    "\0\104\0\u3058\0\u309c\0\u30e0\0\104\0\u3124\0\104\0\u3168"+
    "\0\u31ac\0\u31f0\0\u3234\0\u3278\0\104\0\u32bc\0\104\0\u3300"+
    "\0\u3344\0\104\0\u3388\0\104\0\u33cc\0\u3410\0\u3454\0\u3498"+
    "\0\104\0\u34dc\0\u3520\0\u3564\0\u35a8\0\104\0\u35ec\0\104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\0"+
    "\1\3\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\15\1\17\1\20\1\21\1\22\1\15\1\23\1\15"+
    "\1\24\4\15\1\25\1\15\1\26\2\15\1\27\1\15"+
    "\1\30\1\31\1\32\2\15\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\2\15\1\55"+
    "\2\15\1\56\1\57\1\2\105\0\3\60\4\0\1\60"+
    "\71\0\1\57\2\0\2\60\1\3\4\0\1\60\71\0"+
    "\1\57\1\0\3\61\1\0\1\62\76\61\1\63\5\0"+
    "\1\64\1\65\106\0\1\10\41\56\20\0\1\10\2\56"+
    "\1\66\3\56\3\0\1\67\1\70\1\67\4\0\1\67"+
    "\2\15\1\71\15\15\1\72\2\15\1\73\16\15\20\0"+
    "\3\15\1\0\3\15\3\0\1\67\1\70\1\67\4\0"+
    "\1\67\6\15\1\74\33\15\20\0\3\15\1\0\3\15"+
    "\3\0\1\67\1\70\1\67\4\0\1\67\14\15\1\75"+
    "\4\15\1\76\20\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\5\15\1\77\34\15"+
    "\20\0\3\15\1\0\3\15\3\0\1\67\1\70\1\67"+
    "\4\0\1\67\42\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\5\15\1\100\6\15"+
    "\1\101\25\15\20\0\3\15\1\0\3\15\3\0\1\67"+
    "\1\70\1\67\4\0\1\67\10\15\1\102\11\15\1\103"+
    "\17\15\20\0\3\15\1\0\3\15\3\0\1\67\1\70"+
    "\1\67\4\0\1\67\5\15\1\104\34\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\67\1\70\1\67\4\0\1\67"+
    "\3\15\1\105\36\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\11\15\1\106\30\15"+
    "\20\0\3\15\1\0\3\15\3\0\1\67\1\70\1\67"+
    "\4\0\1\67\5\15\1\107\2\15\1\110\31\15\20\0"+
    "\3\15\1\0\3\15\3\0\1\67\1\70\1\67\4\0"+
    "\1\67\5\15\1\111\11\15\1\112\22\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\67\1\70\1\67\4\0\1\67"+
    "\21\15\1\113\20\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\11\15\1\114\30\15"+
    "\20\0\3\15\1\0\3\15\3\0\1\67\1\70\1\67"+
    "\4\0\1\67\11\15\1\115\30\15\20\0\3\15\1\0"+
    "\3\15\3\0\1\67\1\70\1\67\4\0\1\67\11\15"+
    "\1\116\30\15\20\0\3\15\1\0\3\15\3\0\1\67"+
    "\1\70\1\67\4\0\1\67\14\15\1\117\25\15\20\0"+
    "\3\15\1\0\3\15\3\0\1\67\1\70\1\67\4\0"+
    "\1\67\11\15\1\120\30\15\20\0\3\15\1\0\3\15"+
    "\3\0\1\67\1\70\1\67\4\0\1\67\17\15\1\121"+
    "\22\15\20\0\3\15\1\0\3\15\56\0\1\122\105\0"+
    "\1\123\105\0\1\124\107\0\1\125\103\0\1\126\103\0"+
    "\1\127\103\0\1\130\106\0\1\131\104\0\1\132\24\0"+
    "\1\10\21\56\1\133\17\56\20\0\1\10\1\133\1\56"+
    "\1\66\3\56\13\0\42\56\20\0\3\56\1\0\3\56"+
    "\3\0\3\57\4\0\1\57\73\0\2\61\2\0\3\61"+
    "\2\0\73\61\2\64\2\0\3\64\2\0\73\64\5\65"+
    "\1\134\1\135\75\65\11\0\1\136\61\0\1\136\13\0"+
    "\1\67\101\0\1\67\1\70\1\67\4\0\1\67\3\15"+
    "\1\137\36\15\20\0\3\15\1\0\3\15\3\0\1\140"+
    "\1\141\1\140\4\0\1\140\42\15\20\0\3\15\1\0"+
    "\3\15\3\0\1\67\1\70\1\67\4\0\1\67\24\15"+
    "\1\142\15\15\20\0\3\15\1\0\3\15\3\0\1\67"+
    "\1\70\1\67\4\0\1\67\10\15\1\143\31\15\20\0"+
    "\3\15\1\0\3\15\3\0\1\67\1\70\1\67\4\0"+
    "\1\67\6\15\1\144\33\15\20\0\3\15\1\0\3\15"+
    "\3\0\1\67\1\70\1\67\4\0\1\67\1\15\1\145"+
    "\40\15\20\0\3\15\1\0\3\15\3\0\1\67\1\70"+
    "\1\67\4\0\1\67\6\15\1\146\33\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\67\1\70\1\67\4\0\1\67"+
    "\5\15\1\147\34\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\11\15\1\150\30\15"+
    "\20\0\3\15\1\0\3\15\3\0\1\67\1\70\1\67"+
    "\4\0\1\67\13\15\1\151\26\15\20\0\3\15\1\0"+
    "\3\15\3\0\1\67\1\70\1\67\4\0\1\67\3\15"+
    "\1\152\36\15\20\0\3\15\1\0\3\15\3\0\1\67"+
    "\1\70\1\67\4\0\1\67\1\15\1\153\40\15\20\0"+
    "\3\15\1\0\3\15\3\0\1\67\1\70\1\67\4\0"+
    "\1\67\14\15\1\154\25\15\20\0\3\15\1\0\3\15"+
    "\3\0\1\67\1\70\1\67\4\0\1\67\3\15\1\155"+
    "\36\15\20\0\3\15\1\0\3\15\3\0\1\67\1\70"+
    "\1\67\4\0\1\67\2\15\1\156\37\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\67\1\70\1\67\4\0\1\67"+
    "\17\15\1\157\22\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\14\15\1\160\25\15"+
    "\20\0\3\15\1\0\3\15\3\0\1\67\1\70\1\67"+
    "\4\0\1\67\10\15\1\161\31\15\20\0\3\15\1\0"+
    "\3\15\3\0\1\67\1\70\1\67\4\0\1\67\1\15"+
    "\1\162\40\15\20\0\3\15\1\0\3\15\3\0\1\67"+
    "\1\70\1\67\4\0\1\67\25\15\1\163\14\15\20\0"+
    "\3\15\1\0\3\15\3\0\1\67\1\70\1\67\4\0"+
    "\1\67\3\15\1\164\36\15\20\0\3\15\1\0\3\15"+
    "\3\0\1\67\1\70\1\67\4\0\1\67\3\15\1\165"+
    "\36\15\20\0\3\15\1\0\3\15\3\0\1\67\1\70"+
    "\1\67\4\0\1\67\1\15\1\166\40\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\67\1\70\1\67\4\0\1\67"+
    "\17\15\1\167\22\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\10\15\1\170\31\15"+
    "\20\0\3\15\1\0\3\15\13\0\1\133\3\56\1\133"+
    "\2\56\1\133\1\56\1\133\4\56\3\133\7\56\1\133"+
    "\2\56\1\133\6\56\20\0\1\133\1\56\1\133\1\0"+
    "\1\133\2\56\2\0\6\134\1\135\102\134\1\171\1\135"+
    "\75\134\11\0\1\136\10\0\1\172\50\0\1\136\3\0"+
    "\1\172\5\0\1\173\1\174\1\173\4\0\1\173\11\15"+
    "\1\175\30\15\20\0\3\15\1\0\3\15\5\0\1\140"+
    "\101\0\1\67\1\70\1\67\4\0\1\67\10\15\1\176"+
    "\31\15\20\0\3\15\1\0\3\15\3\0\1\67\1\70"+
    "\1\67\4\0\1\67\10\15\1\177\31\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\67\1\70\1\67\4\0\1\67"+
    "\11\15\1\200\30\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\13\15\1\201\26\15"+
    "\20\0\3\15\1\0\3\15\3\0\1\67\1\70\1\67"+
    "\4\0\1\67\7\15\1\202\32\15\20\0\3\15\1\0"+
    "\3\15\3\0\1\67\1\70\1\67\4\0\1\67\10\15"+
    "\1\203\31\15\20\0\3\15\1\0\3\15\3\0\1\67"+
    "\1\70\1\67\4\0\1\67\17\15\1\204\22\15\20\0"+
    "\3\15\1\0\3\15\3\0\1\67\1\70\1\67\4\0"+
    "\1\67\11\15\1\205\30\15\20\0\3\15\1\0\3\15"+
    "\3\0\1\67\1\70\1\67\4\0\1\67\11\15\1\206"+
    "\30\15\20\0\3\15\1\0\3\15\3\0\1\67\1\70"+
    "\1\67\4\0\1\67\4\15\1\207\35\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\67\1\70\1\67\4\0\1\67"+
    "\1\15\1\210\40\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\6\15\1\211\33\15"+
    "\20\0\3\15\1\0\3\15\3\0\1\67\1\70\1\67"+
    "\4\0\1\67\13\15\1\212\26\15\20\0\3\15\1\0"+
    "\3\15\3\0\1\67\1\70\1\67\4\0\1\67\13\15"+
    "\1\213\26\15\20\0\3\15\1\0\3\15\3\0\1\214"+
    "\1\215\1\214\4\0\1\214\42\15\20\0\3\15\1\0"+
    "\3\15\3\0\1\67\1\70\1\67\4\0\1\67\13\15"+
    "\1\216\26\15\20\0\3\15\1\0\3\15\3\0\1\67"+
    "\1\70\1\67\4\0\1\67\10\15\1\217\31\15\20\0"+
    "\3\15\1\0\3\15\3\0\1\220\1\221\1\220\4\0"+
    "\1\220\30\15\1\222\11\15\20\0\3\15\1\0\3\15"+
    "\3\0\1\67\1\70\1\67\4\0\1\67\33\15\1\223"+
    "\6\15\20\0\3\15\1\0\3\15\3\0\1\67\1\70"+
    "\1\67\4\0\1\67\33\15\1\224\6\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\67\1\70\1\67\4\0\1\67"+
    "\2\15\1\225\37\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\4\15\1\226\35\15"+
    "\20\0\3\15\1\0\3\15\3\0\1\67\1\70\1\67"+
    "\4\0\1\67\10\15\1\227\31\15\20\0\3\15\1\0"+
    "\3\15\13\0\1\230\57\0\2\231\1\230\13\0\1\173"+
    "\101\0\1\67\1\70\1\67\4\0\1\67\14\15\1\232"+
    "\25\15\20\0\3\15\1\0\3\15\3\0\1\67\1\70"+
    "\1\67\4\0\1\67\11\15\1\233\30\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\234\1\235\1\234\4\0\1\234"+
    "\42\15\20\0\3\15\1\0\3\15\3\0\1\236\1\237"+
    "\1\236\4\0\1\236\42\15\20\0\3\15\1\0\3\15"+
    "\3\0\1\67\1\70\1\67\4\0\1\67\10\15\1\240"+
    "\31\15\20\0\3\15\1\0\3\15\3\0\1\241\1\242"+
    "\1\241\4\0\1\241\42\15\20\0\3\15\1\0\3\15"+
    "\3\0\1\67\1\70\1\67\4\0\1\67\26\15\1\243"+
    "\13\15\20\0\3\15\1\0\3\15\3\0\1\244\1\245"+
    "\1\244\4\0\1\244\42\15\20\0\3\15\1\0\3\15"+
    "\3\0\1\67\1\70\1\67\4\0\1\67\2\15\1\246"+
    "\37\15\20\0\3\15\1\0\3\15\3\0\1\247\1\250"+
    "\1\247\4\0\1\247\42\15\20\0\3\15\1\0\3\15"+
    "\3\0\1\67\1\70\1\67\4\0\1\67\2\15\1\251"+
    "\37\15\20\0\3\15\1\0\3\15\3\0\1\67\1\70"+
    "\1\67\4\0\1\67\14\15\1\252\25\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\67\1\70\1\67\4\0\1\67"+
    "\3\15\1\253\36\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\13\15\1\254\26\15"+
    "\20\0\3\15\1\0\3\15\5\0\1\214\101\0\1\67"+
    "\1\70\1\67\4\0\1\67\11\15\1\255\30\15\20\0"+
    "\3\15\1\0\3\15\3\0\1\67\1\70\1\67\4\0"+
    "\1\67\11\15\1\256\30\15\20\0\3\15\1\0\3\15"+
    "\5\0\1\220\101\0\1\67\1\70\1\67\4\0\1\67"+
    "\14\15\1\257\25\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\31\15\1\260\10\15"+
    "\20\0\3\15\1\0\3\15\3\0\1\67\1\70\1\67"+
    "\4\0\1\67\31\15\1\261\10\15\20\0\3\15\1\0"+
    "\3\15\3\0\1\67\1\70\1\67\4\0\1\67\3\15"+
    "\1\262\36\15\20\0\3\15\1\0\3\15\3\0\1\67"+
    "\1\70\1\67\4\0\1\67\37\15\1\263\1\264\1\15"+
    "\20\0\3\15\1\0\3\15\3\0\1\67\1\70\1\67"+
    "\4\0\1\67\5\15\1\265\34\15\20\0\3\15\1\0"+
    "\3\15\13\0\1\230\61\0\1\230\11\0\1\67\1\70"+
    "\1\67\4\0\1\67\20\15\1\266\21\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\67\1\70\1\67\4\0\1\67"+
    "\23\15\1\267\16\15\20\0\3\15\1\0\3\15\5\0"+
    "\1\234\103\0\1\236\101\0\1\67\1\70\1\67\4\0"+
    "\1\67\11\15\1\270\30\15\20\0\3\15\1\0\3\15"+
    "\5\0\1\241\101\0\1\271\1\272\1\271\4\0\1\271"+
    "\42\15\20\0\3\15\1\0\3\15\24\0\1\273\64\0"+
    "\1\244\16\0\1\273\62\0\1\67\1\70\1\67\4\0"+
    "\1\67\4\15\1\274\35\15\20\0\3\15\1\0\3\15"+
    "\5\0\1\247\101\0\1\67\1\70\1\67\4\0\1\67"+
    "\15\15\1\275\24\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\2\15\1\276\37\15"+
    "\20\0\3\15\1\0\3\15\3\0\1\277\1\300\1\277"+
    "\4\0\1\277\42\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\301\1\302\1\301\4\0\1\301\42\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\303\1\304\1\303\4\0\1\303"+
    "\42\15\20\0\3\15\1\0\3\15\3\0\1\67\1\70"+
    "\1\67\4\0\1\67\14\15\1\305\25\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\67\1\70\1\67\4\0\1\67"+
    "\3\15\1\306\36\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\3\15\1\307\36\15"+
    "\20\0\3\15\1\0\3\15\3\0\1\310\1\311\1\310"+
    "\4\0\1\310\42\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\2\15\1\312\37\15"+
    "\20\0\3\15\1\0\3\15\3\0\1\67\1\70\1\67"+
    "\4\0\1\67\1\15\1\313\40\15\20\0\3\15\1\0"+
    "\3\15\3\0\1\67\1\70\1\67\4\0\1\67\16\15"+
    "\1\314\23\15\20\0\3\15\1\0\3\15\3\0\1\67"+
    "\1\70\1\67\4\0\1\67\17\15\1\315\22\15\20\0"+
    "\3\15\1\0\3\15\3\0\1\67\1\70\1\67\4\0"+
    "\1\67\11\15\1\316\30\15\20\0\3\15\1\0\3\15"+
    "\3\0\1\317\1\320\1\317\4\0\1\317\42\15\20\0"+
    "\3\15\1\0\3\15\5\0\1\271\121\0\1\321\63\0"+
    "\1\67\1\70\1\67\4\0\1\67\13\15\1\322\26\15"+
    "\20\0\3\15\1\0\3\15\3\0\1\323\1\324\1\323"+
    "\4\0\1\323\42\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\325\1\326\1\325\4\0\1\325\42\15\20\0\3\15"+
    "\1\0\3\15\5\0\1\277\103\0\1\301\103\0\1\303"+
    "\101\0\1\67\1\70\1\67\4\0\1\67\17\15\1\327"+
    "\22\15\20\0\3\15\1\0\3\15\3\0\1\67\1\70"+
    "\1\67\4\0\1\67\11\15\1\330\30\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\67\1\70\1\67\4\0\1\67"+
    "\11\15\1\331\30\15\20\0\3\15\1\0\3\15\5\0"+
    "\1\310\101\0\1\67\1\70\1\67\4\0\1\67\3\15"+
    "\1\332\36\15\20\0\3\15\1\0\3\15\3\0\1\67"+
    "\1\70\1\67\4\0\1\67\2\15\1\333\37\15\20\0"+
    "\3\15\1\0\3\15\3\0\1\334\1\335\1\334\4\0"+
    "\1\334\42\15\20\0\3\15\1\0\3\15\3\0\1\67"+
    "\1\70\1\67\4\0\1\67\16\15\1\336\23\15\20\0"+
    "\3\15\1\0\3\15\3\0\1\67\1\70\1\67\4\0"+
    "\1\67\2\15\1\337\37\15\20\0\3\15\1\0\3\15"+
    "\5\0\1\317\124\0\1\340\60\0\1\341\1\342\1\341"+
    "\4\0\1\341\42\15\20\0\3\15\1\0\3\15\5\0"+
    "\1\323\125\0\1\343\61\0\1\325\21\0\1\343\57\0"+
    "\1\67\1\70\1\67\4\0\1\67\31\15\1\344\10\15"+
    "\20\0\3\15\1\0\3\15\3\0\1\345\1\346\1\345"+
    "\4\0\1\345\42\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\347\1\350\1\347\4\0\1\347\42\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\67\1\70\1\67\4\0\1\67"+
    "\11\15\1\351\30\15\20\0\3\15\1\0\3\15\3\0"+
    "\1\67\1\70\1\67\4\0\1\67\11\15\1\352\30\15"+
    "\20\0\3\15\1\0\3\15\5\0\1\334\101\0\1\67"+
    "\1\70\1\67\4\0\1\67\11\15\1\353\30\15\20\0"+
    "\3\15\1\0\3\15\3\0\1\67\1\70\1\67\4\0"+
    "\1\67\3\15\1\354\36\15\20\0\3\15\1\0\3\15"+
    "\24\0\1\355\64\0\1\341\122\0\1\356\62\0\1\357"+
    "\1\360\1\357\4\0\1\357\42\15\20\0\3\15\1\0"+
    "\3\15\5\0\1\345\103\0\1\347\101\0\1\67\1\70"+
    "\1\67\4\0\1\67\15\15\1\361\24\15\20\0\3\15"+
    "\1\0\3\15\3\0\1\362\1\363\1\362\4\0\1\362"+
    "\42\15\20\0\3\15\1\0\3\15\3\0\1\364\1\365"+
    "\1\364\4\0\1\364\42\15\20\0\3\15\1\0\3\15"+
    "\3\0\1\67\1\70\1\67\4\0\1\67\13\15\1\366"+
    "\26\15\20\0\3\15\1\0\3\15\16\0\1\367\72\0"+
    "\1\357\101\0\1\67\1\70\1\67\4\0\1\67\11\15"+
    "\1\370\30\15\20\0\3\15\1\0\3\15\5\0\1\362"+
    "\103\0\1\364\101\0\1\371\1\372\1\371\4\0\1\371"+
    "\42\15\20\0\3\15\1\0\3\15\21\0\1\373\65\0"+
    "\1\67\1\70\1\67\4\0\1\67\14\15\1\374\25\15"+
    "\20\0\3\15\1\0\3\15\5\0\1\371\125\0\1\375"+
    "\57\0\1\376\1\377\1\376\4\0\1\376\42\15\20\0"+
    "\3\15\1\0\3\15\15\0\1\u0100\73\0\1\376\100\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13872];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\25\1\1\11\1\1\1\11"+
    "\1\1\2\11\4\1\1\11\2\1\2\11\1\1\1\11"+
    "\2\1\2\0\1\11\1\0\3\1\1\11\32\1\11\11"+
    "\1\1\2\0\2\1\1\11\30\1\1\11\1\0\1\11"+
    "\20\1\1\11\3\1\1\11\10\1\1\0\2\1\1\11"+
    "\1\1\1\11\2\1\1\11\5\1\1\11\21\1\1\11"+
    "\1\1\1\0\3\1\1\11\1\1\1\11\1\1\1\11"+
    "\4\1\1\11\6\1\1\11\1\1\1\0\1\1\1\11"+
    "\10\1\1\11\3\1\1\0\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\5\1\1\11\1\0\1\11\2\1"+
    "\1\11\1\1\1\11\2\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    String token = "";
    int fixed = 0;
    String whites = "";
    public List<String> errors = new LinkedList<String>();

    public List<String> getError(){
          return errors;
    }

    private String longIdentifier(String text){
        if(text.length() > 31){
            return text.substring(0, 31);
        }else{
            return text;
        }
    }

    private String blankSpaces(int length){
        // allow 32 to be the max white space between token and the next word
        StringBuilder builder = new StringBuilder();
        for(int i = 0; i < 32 - length; i++){
            builder.append(" ");
        }
        return builder.toString();
    }

    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn, yytext());
    }

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { errors.add("*** Error en linea " + yyline + " caracter no reconocido " + yytext());
    //return "*** Error en linea " + yyline + " caracter no reconocido " + yytext();
    return symbol(sym.ERROR);
            }
          case 68: break;
          case 2: 
            { // accion vacia: se ignoran los espacios y tabuladores
            }
          case 69: break;
          case 3: 
            { /*token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'" + token + "'";*/
    return symbol(sym.DIV);
            }
          case 70: break;
          case 4: 
            { /*whites = blankSpaces(1);
     return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'*'";*/
     return symbol(sym.MULT);
            }
          case 71: break;
          case 5: 
            { /*
    token = yytext();
    fixed = (token.length() == 1) ? fixed = yycolumn : token.length() - 1;
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed +  " is intConstant  " + "(value = " + token + ")"; */
    return symbol(sym.INTCONST, new Integer(Integer.parseInt(yytext()))) ;
            }
          case 72: break;
          case 6: 
            { token = longIdentifier(yytext());
    fixed = (token.length() == 1) ? (yycolumn) : yycolumn + token.length() - 2;
    whites = blankSpaces(token.length());
    if(yytext().length() <= 31)
        return symbol(sym.IDENTIFIER, fixed);
        //return token + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is identifier";
    else
        return symbol(sym.IDENTIFIER, fixed);
        //return token + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is identifier (truncated)";
            }
          case 73: break;
          case 7: 
            { /*token = yytext();
     whites = blankSpaces(1);
     return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + "'" + token + "'";*/
     return symbol(sym.LEFTBRACKET);
            }
          case 74: break;
          case 8: 
            { /*token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + "'" + token + "'";*/
    return symbol(sym.RIGHTBRACKET);
            }
          case 75: break;
          case 9: 
            { /*token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + "'" + token + "'";*/
    return symbol(sym.LEFTCURLY);
            }
          case 76: break;
          case 10: 
            { /*token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + "'" + token + "'";*/
    return symbol(sym.RIGHTCURLY);
            }
          case 77: break;
          case 11: 
            { /*token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + "'" + token + "'";*/
    return symbol(sym.LEFTPAR);
            }
          case 78: break;
          case 12: 
            { /*token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + "'" + token + "'";*/
    return symbol(sym.RIGHTPAR);
            }
          case 79: break;
          case 13: 
            { /*token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + "'" + token + "'";*/
    return symbol(sym.PERCENT);
            }
          case 80: break;
          case 14: 
            { /*token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + "'" + token + "'";*/
    return symbol(sym.LESST);
            }
          case 81: break;
          case 15: 
            { /*token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + "'" + token + "'";*/
    return symbol(sym.GREATT);
            }
          case 82: break;
          case 16: 
            { /*token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + "'" + token + "'";*/
    return symbol(sym.EQUALS);
            }
          case 83: break;
          case 17: 
            { /*token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + "'" + token + "'";*/
    return symbol(sym.EXCLA);
            }
          case 84: break;
          case 18: 
            { /*token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + "'" + token + "'";*/
    return symbol(sym.PAC);
            }
          case 85: break;
          case 19: 
            { /*whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'+'";*/
    return symbol(sym.ADD);
            }
          case 86: break;
          case 20: 
            { /*whites = blankSpaces(1);
     return yytext() + whites + "line " + yyline + " cols " + yycolumn + " is " + "'-'";*/
     return symbol(sym.MINUS);
            }
          case 87: break;
          case 21: 
            { /*token = yytext();
    whites = blankSpaces(1);
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + ".";*/
    return symbol(sym.DOT);
            }
          case 88: break;
          case 22: 
            { /*errors.add("*** Error en linea " + yyline + " identificador inválido: " + yytext());
    return "*** Error en linea " + yyline + " identificador inválido: " + yytext();*/
    return symbol(sym.ERROR);
            }
          case 89: break;
          case 23: 
            { /*token = yytext();
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " col " + yycolumn + " is " + ",";*/
    return symbol(sym.COMMA);
            }
          case 90: break;
          case 24: 
            { /*token = yytext();
    fixed = yycolumn + token.length() - 2;
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is string constant (Value = " + yytext() + " )" ;*/
    return symbol(sym.STRINGCONST);
            }
          case 91: break;
          case 25: 
            { // ignore single line comments
            }
          case 92: break;
          case 26: 
            { //errors.add(yytext() + "comment not closed");
    //return yytext() + "comment not closed";
            }
          case 93: break;
          case 27: 
            { /*token = yytext();
    fixed = yycolumn + token.length() - 1;
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is double (value = " + token + ")";*/
    return symbol(sym.DOUBLECONST, new Double(Double.parseDouble(yytext())));
            }
          case 94: break;
          case 28: 
            { /*fixed = yycolumn + 1;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is if";*/
    return symbol(sym.IF);
            }
          case 95: break;
          case 29: 
            { /*fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'[]'";*/
    return symbol(sym.TWOBRACK);
            }
          case 96: break;
          case 30: 
            { /*fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'{}'";*/
    return symbol(sym.TWOCURLY);
            }
          case 97: break;
          case 31: 
            { /*fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'()'";*/
    return symbol(sym.TWOPAR);
            }
          case 98: break;
          case 32: 
            { /*token = yytext();
    fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed +  " is " + "'" + token + "'";*/
    return symbol(sym.LESSEQ);
            }
          case 99: break;
          case 33: 
            { /*token = yytext();
    fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'" + token + "'";*/
    return symbol(sym.GTREQ);
            }
          case 100: break;
          case 34: 
            { /*token = yytext();
    fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'" + token + "'";*/
    return symbol(sym.COMPEQUALS);
            }
          case 101: break;
          case 35: 
            { /*token = yytext();
    fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'" + token + "'";*/
    return symbol(sym.DIFFERENT);
            }
          case 102: break;
          case 36: 
            { /*token = yytext();
    fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'" + token + "'";*/
    return symbol(sym.AND);
            }
          case 103: break;
          case 37: 
            { /*fixed = yycolumn + 1;
    whites = blankSpaces(2);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is " + "'||'";*/
    return symbol(sym.OR);
            }
          case 104: break;
          case 38: 
            { /*token = yytext();
     fixed = token.length() - 1;
     whites = blankSpaces(token.length());
     return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is hexadecimal " + "(value = " + token + ")";*/
     return symbol(sym.DOUBLECONST, new Integer(Integer.parseInt("0x45E213".replace("0x",""), 16)));
            }
          case 105: break;
          case 39: 
            { /*fixed = yycolumn + 2;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is int";*/
    return symbol(sym.INT);
            }
          case 106: break;
          case 40: 
            { /*fixed = yycolumn + 2;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is for";*/
    return symbol(sym.FOR);
            }
          case 107: break;
          case 41: 
            { /*fixed = yycolumn + 2;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is New";*/
    return symbol(sym.NEW);
            }
          case 108: break;
          case 42: 
            { // ignore multiline comments
    //return "Comentario multi linea";
            }
          case 109: break;
          case 43: 
            { /*fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is null";*/
    return symbol(sym.NULL);
            }
          case 110: break;
          case 44: 
            { /*fixed = yycolumn + 3;
    whites = blankSpaces(4);
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is boolConstant (value = true)";*/
    return symbol(sym.TRUE);
            }
          case 111: break;
          case 45: 
            { /*fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is this";*/
    return symbol(sym.THIS);
            }
          case 112: break;
          case 46: 
            { /*fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is bool";*/
    return symbol(sym.BOOL);
            }
          case 113: break;
          case 47: 
            { /*fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is void";*/
    return symbol(sym.VOID);
            }
          case 114: break;
          case 48: 
            { // Give priority to doubles with exponential values
    /*token = yytext();
    fixed = yycolumn + token.length() - 1;
    whites = blankSpaces(token.length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is double (value = " + token + ")";*/
    return symbol(sym.DOUBLECONST, new Double(Double.parseDouble(yytext())));
            }
          case 115: break;
          case 49: 
            { /*fixed = yycolumn + 4;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is break";*/
    return symbol(sym.BREAK);
            }
          case 116: break;
          case 50: 
            { /*fixed = yycolumn + 5;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is Malloc";*/
    return symbol(sym.CONST);
            }
          case 117: break;
          case 51: 
            { /*fixed = yycolumn + 4;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is class";*/
    return symbol(sym.CLASS);
            }
          case 118: break;
          case 52: 
            { /*fixed = yycolumn + 4;
     whites = blankSpaces(5);
     return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is boolConstant (value = false)";*/
     return symbol(sym.FALSE);
            }
          case 119: break;
          case 53: 
            { /*fixed = yycolumn + 4;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is while";*/
    return symbol(sym.WHILE);
            }
          case 120: break;
          case 54: 
            { /*fixed = yycolumn + 4;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is Print";*/
    return symbol(sym.PRINT);
            }
          case 121: break;
          case 55: 
            { /*fixed = yycolumn + 5;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is double";*/
    return symbol(sym.DOUBLE);
            }
          case 122: break;
          case 56: 
            { /*fixed = yycolumn + 5;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is string";*/
    return symbol(sym.STRING);
            }
          case 123: break;
          case 57: 
            { /*fixed = yycolumn + 5;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is Malloc";*/
    return symbol(sym.MALLOC);
            }
          case 124: break;
          case 58: 
            { /*fixed = yycolumn + 6;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is extends";*/
    return symbol(sym.EXTENDS);
            }
          case 125: break;
          case 59: 
            { /*fixed = yycolumn + 2;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is GetByte";*/
    return symbol(sym.GETBYTE);
            }
          case 126: break;
          case 60: 
            { /*fixed = yycolumn + 2;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is SetByte";*/
    return symbol(sym.SETBYTE);
            }
          case 127: break;
          case 61: 
            { /*fixed = yycolumn + 7;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is NewArray";*/
    return symbol(sym.NEWARRAY);
            }
          case 128: break;
          case 62: 
            { /*fixed = yycolumn + 7;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is ReadLine";*/
    return symbol(sym.READLINE);
            }
          case 129: break;
          case 63: 
            { /*fixed = yycolumn + 8;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is interface";*/
    return symbol(sym.INTERFACE);
            }
          case 130: break;
          case 64: 
            { /*fixed = yycolumn + 3;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is else";*/
    return symbol(sym.ELSE);
            }
          case 131: break;
          case 65: 
            { /*fixed = yycolumn + 9;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is implements";*/
    return symbol(sym.IMPLEMENTS);
            }
          case 132: break;
          case 66: 
            { /*fixed = yycolumn + 10;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is ReadInteger";*/
    return symbol(sym.READINTEGER);
            }
          case 133: break;
          case 67: 
            { /*fixed = yycolumn + 5;
    whites = blankSpaces(yytext().length());
    return yytext() + whites + "line " + yyline + " cols " + yycolumn + "-" + fixed + " is return";*/
    return symbol(sym.RETURN);
            }
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
